<%= javascript_include_tag "ext-base" %>
<%= javascript_include_tag "ext-all" %>
<%= javascript_include_tag "GroupSummary" %>
<%= javascript_include_tag "RowEditor" %>
<%= javascript_include_tag "SearchField" %>
<%= javascript_include_tag "ColumnNodeUI" %>
<%= stylesheet_link_tag "ColumnNodeUI" %>
<%= stylesheet_link_tag "ext-all-notheme" %>
<%= stylesheet_link_tag "xtheme-blue" %>

<% nome_field_name = '' %>

<style>
  /* ColumnTree */
  .consumo {
    background-image:url(/images/drink.png) !important;
  }
  .consumo-inscricao {
      background-image:url(/images/user.png) !important;
  }


  /* GRID */

  .x-grid3-col-preco {text-align:right}
  .x-grid3-col-pago {text-align:right}
  .x-grid3-col-desconto {text-align:right}
  .x-grid3-col-valor {text-align:right}
  .x-grid3-col-total {text-align:right}
  .x-grid3-col-divida {text-align:right}
  .x-grid3-col-numero {text-align:right}
  
  .detail {color: #000000; background-image: none; background-color:#FFFFFF;
    opacity: 1;
    -moz-opacity: 1;
    filter: alpha(opacity=100); }
    
    .x-grid3-summary-row {
    border-left:1px solid #fff;
    border-right:1px solid #fff;
    color:#333;
    background: #f1f2f4;
  }
  
  .x-grid3-gridsummary-row-inner{overflow:hidden;width:100%;}/* IE6 requires width:100% for hori. scroll to work */
  .x-grid3-gridsummary-row-offset{width:10000px;}
  .x-grid-hide-gridsummary .x-grid3-gridsummary-row-inner{display:none;}
  
  .x-grid3-summary-row .x-grid3-cell-inner {
      font-weight:bold;
      padding-bottom:4px;
  }
  .x-grid3-cell-first .x-grid3-cell-inner {
      padding-left:16px;
  }
  .x-grid-hide-summary .x-grid3-summary-row {
      display:none;
  }
  .x-grid3-summary-msg {
      padding:4px 16px;
      font-weight:bold;
  }
  
  .x-grid3 .x-window-ml{
          padding-left: 0;	
  } 
  .x-grid3 .x-window-mr {
          padding-right: 0;
  } 
  .x-grid3 .x-window-tl {
          padding-left: 0;
  } 
  .x-grid3 .x-window-tr {
          padding-right: 0;
  } 
  .x-grid3 .x-window-tc .x-window-header {
          height: 3px;
          padding:0;
          overflow:hidden;
  } 
  .x-grid3 .x-window-mc {
          border-width: 0;
          background: #cdd9e8;
  } 
  .x-grid3 .x-window-bl {
          padding-left: 0;
  } 
  .x-grid3 .x-window-br {
          padding-right: 0;
  }
  .x-grid3 .x-panel-btns {
          padding:0;
  }
  .x-grid3 .x-panel-btns td.x-toolbar-cell {
          padding:3px 3px 0;
  }
  .x-box-inner {
          zoom:1;
  }
  .ext-ie .x-row-editor .x-form-text {
      margin:0 !important; 
  }
  .x-row-editor-header {
  height:2px;
  overflow:hidden;
  background: transparent url(/images/row-editor-bg.gif) repeat-x 0 0;
  }
  .x-row-editor-footer {
  height:2px;
  overflow:hidden;
  background: transparent url(/images/row-editor-bg.gif) repeat-x 0 -2px;
  }
.ext-ie .x-row-editor-footer {
      margin-top:-1px;
  }

  .x-row-editor-body {
  overflow:hidden;
  zoom:1;
  background: #ebf2fb;
  padding-top:2px;
  }
  .x-row-editor .x-btns {
  position:absolute;
  top:28px;
  left:20px;
  padding-left:5px;
  background: transparent url(/images/row-editor-btns.gif) no-repeat 0 0;
  }
  .x-row-editor .x-btns .x-plain-bwrap {
  padding-right:5px;
  background: transparent url(/images/row-editor-btns.gif) no-repeat right -31px;
  }
  .x-row-editor .x-btns .x-plain-body {
  background: transparent url(/images/row-editor-btns.gif) repeat-x 0 -62px;
  height:31px;
  }
  .x-row-editor .x-btns .x-table-layout-cell {
  padding:3px;
  }
  .icon-user-add {
  background-image: url(/images/user_add.gif) !important;
  }
  .icon-user-delete {
  background-image: url(/images/user_delete.gif) !important;
  }
  
  .errorTip .x-tip-body ul{
  list-style-type:disc;
  margin-left:15px;
  }
  
  .search-item a {
      color: #385F95;
      font:bold 11px tahoma, arial, helvetica, sans-serif;
      text-decoration:none;
  }
  .search-item a:hover {
      text-decoration:underline;
  }
  .search-item .search-item {
      padding:5px;
  }
  .search-item p {
     margin:3px !important;
  }
  .search-item {
      background-color: #ffffff;
      border-bottom:1px solid #ddd;
      margin: 0 1px;
      height: 55px;
      display: block;
      overflow:hidden;
  }
  
  .controlo-item {
    background-color: #ffffff;
      border-bottom:1px solid #ddd;
      margin: 0 1px;
      height: 110px;
      display: block;
      overflow:hidden;
  }
  
</style>
<script>

  var selectedElementId;

  Ext.onReady(function(){

    Ext.Ajax.on('beforerequest', function(){ Ext.get('spinner').fadeIn(); }, this);
    Ext.Ajax.on('requestcomplete', function(){ Ext.get('spinner').fadeOut(); }, this);
    
    Ext.QuickTips.init();
    
    Ext.form.Field.prototype.msgTarget = 'side';
    
    var xg = Ext.grid;
    var detailWin;
    var editWin;
    var igrejaWin;
    var pagamentosWin;
    var recomendacoesWin;
    var consumosWin;
    var descontosWin;
    var facturasWin;
    var fixarPrecoWin;
    var currentPage = 0;
    var pageSize = 20;
    var pagingToolbar;
    var facturasGrid;
    var query;
    var queryFacturas;
    var sort;
    var dir = "ASC";
    var searchField;
    var searchFieldFacturas;
    
    var inscricaoSelected;
    var consumoSelected;
    var facturaSelected;
    var reservaSelected;
    var descontoSelected;
    var pagamentoSelected;
    var recomendacaoSelected;
    
    
    var campos = [
        <% @event.grupo_camposs.each do |grupo| %>
          <% grupo.campos.each do |campo| %>
            ['<%=campo.id%>','<%=campo.nome%>', '<%=campo.label%>'],
          <% end %>
        <% end %>
    ];
    
    
    
    // shared reader
    var inscricao = Ext.data.Record.create([
      {name: 'id', mapping:'id', type: 'int'},
         <% @event.grupo_camposs.each do |grupo| %>
            <% grupo.campos.each do |campo| %>
              <% if(campo.tipo.upcase == "LOV") %>
                {name: '<%= campo.nome %>', mapping:'<%=campo.lista_valores.class_name != nil ? campo.lista_valores.class_name+"_class" : campo.nome+"_val" %>/<%=campo.lista_valores.text_field%>'},
                {name: '<%= campo.nome %>_value', mapping:'<%=campo.lista_valores.class_name != nil ? campo.lista_valores.class_name+"_class"  : campo.nome+"_val" %>/<%=campo.lista_valores.value_field%>'},
              <% else %>
                <% if(campo.tipo.upcase == "DATE") %>
                  <% if(campo.is_data_nascimento) %>
                    {name: '<%= campo.nome %>', mapping:'<%= campo.nome %>', type: 'date', dateFormat: 'd-m-Y'},
                    {name: 'idadeCalculated', mapping:'idadeCalculated', type: 'int'},
                  <% else %>
                    {name: '<%= campo.nome %>', mapping:'<%= campo.nome %>', type: 'date', dateFormat: 'd-m-Y'},
                  <% end %>
                <% else %>
                <% if(campo.is_nome) %>
                  <% nome_field_name = campo.nome %>
                <% end %>
                {name: '<%= campo.nome %>', mapping:'<%= campo.nome %>'},
                <% end %>
              <% end %>
            <% end %>
        <%end%>
        {name: 'numero', mapping:'numero', type:'int' },
        <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>
          {name: 'preco', mapping:'preco', type:'float' },
          {name: 'pago', mapping:'pago', type:'float' },
          {name: 'desconto', mapping:'total_descontos', type:'float' },
        <% end %>
        <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_LEITURA" || @current_user.profile == "EVENTO_ESCRITA" || @current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>
          {name: 'numero_recomendacoes', mapping:'numero_recomendacoes', type:'int' },
        <% end %>
        {name: 'created_at', mapping:'insc_created_at', type: 'date', dateFormat: 'd-m-Y'},
        {name: 'user', mapping:'user' },
        {name: 'badge_printing_string', mapping: 'badge_printing_string', type: 'string'}
    ]);
    
    var pagamento = Ext.data.Record.create([
      {name: 'id', mapping:'id', type: 'int'},
      {name: 'data', mapping:'data', type: 'date', dateFormat: 'd-m-Y' },
      {name: 'valor', mapping:'valor', type:'float' },
      {name: 'observacoes', mapping:'observacoes' },
      {name: 'tipo_pagamento_id', mapping:'tipo_pagamento/id' },
      {name: 'tipo_pagamento_nome', mapping:'tipo_pagamento/nome' },
      {name: 'tipo_pagamento_nome_curto', mapping:'tipo_pagamento/nome_curto' },
      {name: 'tipo_pagamento_comissao', mapping:'comissao' },
      {name: 'factura_id', mapping:'factura_id'},
      {name: 'factura_nome', mapping:'factura_nome'}
    ]);
    
    
    var tipoPagamento = Ext.data.Record.create([
      {name: 'id', mapping:'id', type: 'int'},
      {name: 'nome', mapping:'nome'},
      {name: 'nome_curto', mapping:'nome_curto'},
      {name: 'icone', mapping:'icone'}
    ]);
    
    
    var recomendacao = Ext.data.Record.create([
      {name: 'id', mapping:'id', type: 'int'},
      {name: 'data', mapping:'data', type: 'date', dateFormat: 'd-m-Y' },
      {name: 'user', mapping:'user' },
      {name: 'assinatura', mapping:'assinatura' }
    ]);
    

    var consumo = Ext.data.Record.create([
      {name: 'id', mapping:'id', type: 'int'},
      {name: 'produto_id', mapping:'produto_id' },
      {name: 'produto_descricao', mapping:'produto_descricao' },
      {name: 'preco', mapping:'preco', type:'float' },
      {name: 'recibo_id', mapping:'recibo_id' },
      {name: 'recibo_nome', mapping:'recibo_nome' }
    ]);
    
    
    var desconto = Ext.data.Record.create([
      {name: 'id', mapping:'id', type: 'int'},
      {name: 'desconto_id', mapping:'desconto_id', type: 'int'},
      {name: 'desconto_descricao', mapping:'desconto_descricao' },
      {name: 'valor', mapping:'valor', type:'float' }
    ]);
    
    
    var factura = Ext.data.Record.create([
      {name: 'id', type: 'int'},
      {name: 'nome' },
      {name: 'total', type:'float' },
      {name: 'pago', type:'float' },
      {name: 'desconto', type:'float'  },
      {name: 'divida', type:'float' },
      {name: 'estado'},
      {name: 'nivel_alerta'}
    ]);
    
    
    
    var facturaFull = Ext.data.Record.create([
      {name: 'id', type: 'int'},
      {name: 'nome'},
      {name: 'nif'},
      {name: 'data', type: 'date', dateFormat: 'd-m-Y' },
      {name: 'fechado' },
      {name: 'pago' },
      {name: 'taxa_inscricao', type:'float' },
      {name: 'referencia_mb', type: 'int'},
      {name: 'referencia_mb_taxa', type: 'int'},
      {name: 'total_recibo', type:'float'},
      {name: 'total_pago', type:'float'},
      {name: 'total_desconto', type:'float'},
      {name: 'total_divida', type:'float'},
      {name: 'nivel_alerta'}
    ]);
    
    
    var reserva = Ext.data.Record.create([
      {name: 'id', type: 'int'},
      {name: 'inscricao_id' },
      {name: 'inscricao_nome' },
      {name: 'inscricao_idade' },
      {name: 'reserva_id' },
      {name: 'reserva_nome'},
      {name: 'reserva_nome_curto'},
      {name: 'reserva_tipo_reserva_id'},
      {name: 'reserva_tipo_reserva_nome'},
      {name: 'reserva_tipo_reserva_icon'},
      {name: 'reserva_estadoactual_id'},
      {name: 'reserva_estadoactual_nome'},
      {name: 'reserva_estadoactual_descricao'},
      {name: 'reserva_estadoactual_data_inicio'},
      {name: 'reserva_estadoactual_icon'},
      {name: 'reserva_estadoactual_isfinal'},
      {name: 'reserva_estadoactual_iswarning'},
      {name: 'reserva_estadoactual_backcolor'},
      {name: 'reserva_data_consumo', type: 'date', dateFormat: 'd-m-Y' },
      {name: 'reserva_ementa'},
      {name: 'reserva_custo' },
      {name: 'reserva_aviso' }
    ]);
    
    
    
    var myReader = new Ext.data.XmlReader({
        totalProperty: "totalCount",
        record: "inscricao",     // The repeated element which contains row information
        id: "id"                // The element within the row that provides an ID for the record (optional)
     }, inscricao);
    
    
    function preco(val){
        if(val != null)
          return "<div style=\"text-align:right; width:100%;\">"+formatCurrency(val)+"</div>";
        /*else
          return "<div style=\"text-align:right; width:100%;\">"+formatCurrency(0)+"</div>";*/
    }
    
    
    function precoDivida(val){
        if(val > 0)
          return "<span style=\"color:red\">"+formatCurrency(val)+"</span>";
        else 
          return "<span style=\"color:green\">"+formatCurrency(val)+"</span>";
    }
    
    
    function precoDesconto(val){
        if(val > 0)
          return "<span style=\"color:green\">"+formatCurrency(val)+"</span>";
    }
    
    
    function recomendacoes(val){
        if(val > 0)
          return "<div align=\"center\"><img src=\"/images/thumb_up.png\" /></div>";
        else
          return "<div></div>";
        
    }
    
    function estado_recibo(val){
        if(val == "pending")
          return "<img src=\"/images/coins.png\" />";
        if(val == "paid")
          return "<img src=\"/images/accept.png\" />";
        if(val == "halfpaid")
          return "<img src=\"/images/money_delete.png\" />";
        if(val == "error")
          return "<img src=\"/images/exclamation.png\" />";
        if(val == "warning")
          return "<img src=\"/images/error.png\" />";
    }
    
    function nivel_alerta(val){
      if(val == 1){
        return "<span align=\"center\"><img src=\"/images/error_add.png\" /></span>";
      }
      if(val == 2){
        return "<span align=\"center\"><img src=\"/images/error.png\" /></span>";
      }
      if(val == 3){
        return "<span align=\"center\"><img src=\"/images/exclamation.png\" /></span>";
      }
    }
    
    function numero(val){
        return "<span align=\"center\"><img src=\"/images/coins.png\" /></span>";
    }  
  
    sort = "<%= nome_field_name %>";
    
    myStore = new Ext.data.GroupingStore({
      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_inscricoes.xml',
      reader: myReader,
      remoteSort: true,
      /*remoteGroup: true,*/
      remote: true,
      totalProperty: "totalCount",
      autoLoad: false,
      sortInfo: {
          field: '<%= nome_field_name %>',
          direction: 'ASC' // or 'DESC' (case sensitive for local sorting),
      },
      listeners: {
        exception: function(dataProxy,type,action,options,response,arg) {
                      alert("exception");
                    },
        load: function(){
          searchField.focus();
        }
      },
      baseParams: {limit:pageSize}
    }); 

    var summary = new Ext.ux.grid.GridSummary();
    
    var grid = new xg.GridPanel({
        store:  myStore,
        columns: [
          
          {id:'numero', header:'N', sortable:true, dataIndex:'numero', width:25, summaryType:'count'},
          <% if(@event.precisa_recomendacao) %>
              {id:'numero_recomendacoes', header:'', sortable:false, dataIndex:'numero_recomendacoes', width:18, renderer:recomendacoes, hidden:false},
          <% end %>
          <% grupos_campos = EventosGruposCampos.find_all_by_evento_id(@event.id, :order=>"`eventos_grupos_campos`.order") %>
          <% grupos_campos.each do |evento_grupo| %>
            <% grupo = evento_grupo.grupo_campos %>
            <% campos = Campo.find_all_by_grupo_campos_id(grupo.id, :order=>"`campos`.order") %>
            <% campos.each do |campo| %>
                <% if(campo.tipo.upcase == 'DATE') %>
                  <% if(campo.is_data_nascimento) %>
                    {name:'<%= campo.id %>', id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>', renderer: Ext.util.Format.dateRenderer('d-m-Y'), width:50, hidden:true},
                    {id:'idadeCalculated', header: "Idade", sortable: true, dataIndex: 'idadeCalculated', width:27 , summaryType:'average'},
                  <% else %>
                    {name:'<%= campo.id %>', id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>', renderer: Ext.util.Format.dateRenderer('d-m-Y'), width:50 <%if(!campo.mostra_tabela)%>, hidden:true<% end %>},
                  <% end %>
                <% end %>
                <% if(campo.tipo.upcase == 'INT') %>
                  {name:'<%= campo.id %>',id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>', width:25 <%if(!campo.mostra_tabela)%>, hidden:true<% end %> },
                <% end %>
                <% if(campo.tipo.upcase == 'DECIMAL') %>
                  {name:'<%= campo.id %>',id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>', width:35 <%if(!campo.mostra_tabela)%>, hidden:true<% end %> },
                <% end %>
                <% if(campo.tipo.upcase == 'LOV') %>
                  {name:'<%= campo.id %>',id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>' <%if(!campo.mostra_tabela)%>, hidden:true<% end %> },
                <% end %>
                <% if(campo.tipo.upcase == 'STRING' || campo.tipo.upcase == 'TEXT') %>
                  <% if(campo.nome.upcase == 'NOME') || (campo.is_nome) %>
                    {name:'<%= campo.id %>',id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>', width:190 <%if(!campo.mostra_tabela)%>, hidden:true<% end %> },
                  <% else %>
                    {name:'<%= campo.id %>',id:'<%= campo.nome %>', header: "<%= campo.label %>", sortable: true, dataIndex: '<%= campo.nome %>', width:70 <%if(!campo.mostra_tabela)%>, hidden:true<% end %> },
                  <% end %>
                <% end %>
            <% end %>
          <% end %>
          <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>
            {id:'preco', header:'Preço', sortable:false, dataIndex:'preco', renderer:preco, width:45, summaryType:'sum', summaryRenderer:preco},
            {id:'desconto', header:'Desc', sortable:false, dataIndex:'desconto', renderer:preco, width:45, summaryType:'sum', summaryRenderer:preco},
            {id:'pago', header:'Pago', sortable:false, dataIndex:'pago', renderer:preco, width:45, summaryType:'sum', summaryRenderer:preco},
            {id:'created_at', header:'Data Insc', sortable:true, dataIndex:'created_at', renderer: Ext.util.Format.dateRenderer('d-m-Y'), width:45, hidden:true},
            {id:'user', header:'User', sortable:true, dataIndex:'user', width:30, hidden:true}
          <% end %>
        ],

        view: new Ext.grid.GroupingView({
            forceFit:true,
            groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Inscrições" : "Inscrição"]})'
        }),

        sm: new Ext.grid.RowSelectionModel({
          singleSelect:true,
          listeners: {
            rowselect:
             function(smObj, rowIndex, record) {
                inscricaoSelected = record;
             }
          }
        }),
        border: true,
        collapsible: false,
        //animCollapse: true,
        //title: 'Lista de Inscrições',
        iconCls: 'icon-grid',
        stripeRows: true,
        height   : 495,
        //plugins: summary,
        tbar: new Ext.Toolbar({
          items: [
            searchField = new Ext.ux.form.SearchField({
                store: myStore,
                emptyText:'Filtro',
                width:200,
                listeners: {
                  change: function(t, r, i){
                    query = t.getValue();
                  }
                }
            }), ' ',
            new Ext.form.ComboBox({
                store: new Ext.data.ArrayStore({
                  fields: ['id', 'nome', 'label'],
                  data: campos
                  }),  
                displayField: 'label',
                valueField: 'nome',
                typeAhead: true,
                mode: 'local',
                triggerAction: 'all',
                emptyText:'Campo',
                selectOnFocus:true,
                width:100,
                listeners: {
                    select: function(t, r, i){
                      myStore.setBaseParam('limit', pageSize);
                      myStore.setDefaultSort(t.getValue(), 'ASC');
                      sort = t.getValue();
                      dir = "ASC";
                    }
                  }
            }),
            new Ext.Toolbar.Separator(),
            {
              text:'Inscrição',
              icon:'/images/user.png',
              menu: 
                new Ext.menu.Menu({
                   id: 'menuEdicao',
                   style: {
                       overflow: 'visible'     // For the Combo popup
                   },
                   items: [
                        {
                          text: "Nova Inscrição",
                          icon: "/images/add.png",
                          listeners:
                          {
                            click: function() {
                              window.location = "/<%= @entidade.sigla %>/<%= @event.codigo %>/inscricoes/nova";
                            }
                          }
                        },
                       {
                       text: "Detalhe",
                       icon: "/images/information.png",
                       listeners :
                        {
                          click: function() {
                            var selectedElement = inscricaoSelected;
                            if(!detailWin){
                              detailWin = new Ext.Window({
                                  title    : 'Detalhe de inscrição',
                                  closable : true,
                                  width    : 600,
                                  height   : 'auto',
                                  autoHeight   : true,
                                  //border : false,
                                  closeAction: 'hide',
                                  plain    : true,
                                  //layout   : 'content',
                                  autoScroll: true,
                                  items    : [fs],
                                  listeners: {
                                      hide: function(){detailWin = null;}
                                  }
                              });
                            }
                            detailWin.show();
                            fs.getForm().loadRecord(selectedElement);
                          }
                        }
                      },            
                      {
                      text: "Modificar",
                      icon: "/images/pencil.png",
                      disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_ESCRITA" || @current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                      listeners :
                      {
                        click: function() {
                          var selectedElement = inscricaoSelected;
                          var selectedElementId = selectedElement.data.id;
                          if(!editWin){
                            editWin = new Ext.Window({
                                title    : 'Modificar inscrição',
                                closable : true,
                                width    : 600,
                                height   : 'auto',
                                //border : false,
                                closeAction: 'hide',
                                plain    : true,
                                //layout   : 'content',
                                autoScroll: true,
                                items    : [fs_edit],
                                listeners: {
                                    hide: function(){editWin = null;}
                                }
                            });
                          }
                          editWin.show();
                          fs_edit.getForm().loadRecord(selectedElement);
                        }
                      }
                    },
                    {                   
                      text: "Apagar",
                      icon: "/images/delete.png",
                      disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_ESCRITA" || @current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                      listeners:
                      {
                        click: function() {
                          var selectedElement = inscricaoSelected;
                          var selectedElementId = selectedElement.data.id;
                          Ext.MessageBox.show({
                            title: 'Apagar Inscrição',
                            msg: 'Tem a certeza de que quer apagar esta inscrição?',
                            width: 350,
                            buttons: Ext.MessageBox.YESNO,
                            icon: Ext.MessageBox.QUESTION,
                            fn: function(btn) {
                              if(btn == 'yes') {
                                Ext.Ajax.request({
                                  url: '/<%= @entidade.sigla %>/admin/elimina_inscricao/'+selectedElementId,
                                  success: function(result, request) { myStore.load({params:{start:currentPage*pageSize, limit:pageSize}}); },
                                  failure: function(result, request) { alert("Houve um erro a apagar: "+result.responseText);},
                               });
                              }
                            }
                          });
                        }
                      }
                    }
                   ]
                })
            },
            new Ext.Toolbar.Separator(),
            <% if(!@event.preco_consumos) %>
              new Ext.Toolbar.Button({
                text: "Pagamentos",
                icon: "/images/money.png",
                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                listeners :
                {
                  click: function() {
                    var selectedElement = inscricaoSelected;
                    var selectedElementId = selectedElement.data.id;
                    if(!pagamentosWin){
                      pagamentosWin = new Ext.Window({
                          title    : 'Pagamentos',
                          closable : true,
                          width    : 550,
                          height   : 'auto',
                          closeAction: 'hide',
                          plain    : true,
                          autoScroll: true,
                          listeners: {
                            hide: function(){pagamentosWin = null;}
                          },
                          items    : [
                            pagamentosGrid = new xg.GridPanel({
                              store: new Ext.data.Store({
                                          data: myStore.reader.xmlData,
                                          sortInfo:{field: 'data', direction: "ASC"},
                                          reader: new Ext.data.XmlReader({
                                                      record: "inscricao/pagamentos/pagamento[inscricaoId="+selectedElementId+"]",
                                                      id: "id"
                                                  }, pagamento),
                                          remote: true,
                                          autoLoad: true,
                                          listeners: {
                                              update: function(store, record, op){
                                                Ext.Ajax.request({
                                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/regista_ou_actualiza_pagamento/',
                                                      success: function(){
                                                        req = Ext.Ajax.request({
                                                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_inscricoes.xml',
                                                          success: function(){
                                                            myStore.loadData(req.conn.responseXML);
                                                            store.loadData(req.conn.responseXML);
                                                          },
                                                          params: {
                                                            start:currentPage*pageSize,
                                                            limit:pageSize,
                                                            query:query,
                                                            sort: sort,
                                                            dir : dir
                                                          }
                                                        })
                                                      },
                                                      failure: function(){alert("falhou!!");},
                                                      params: {
                                                        pagamentoId: record.data.id,
                                                        pagamentoData: record.data.data,
                                                        pagamentoValor: record.data.valor,
                                                        pagamentoObs: record.data.observacoes,
                                                        pagamentoInscricao: selectedElementId,
                                                        pagamentoTipo: record.data.tipo_pagamento_nome_curto
                                                      }
                                                   });
                                              },
                                              remove: function(store, record, op){
                                                Ext.Ajax.request({
                                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_pagamento/'+record.data.id,
                                                      success: function(){
                                                        req = Ext.Ajax.request({
                                                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_inscricoes.xml',
                                                          success: function(){
                                                            myStore.loadData(req.conn.responseXML);
                                                            store.loadData(req.conn.responseXML);
                                                          },
                                                          params: {
                                                            start:currentPage*pageSize,
                                                            limit:pageSize,
                                                            query:query,
                                                            sort: sort,
                                                            dir : dir
                                                          }
                                                        })
                                                      },
                                                      failure: function(){alert("falhou!!");}
                                                   });
                                              }
                                          }
                                      }),
                              sm: new Ext.grid.RowSelectionModel({
                                singleSelect:true,
                                listeners: {
                                  rowselect:
                                   function(smObj, rowIndex, record) {
                                      pagamentoSelected = record;
                                   }
                                }
                              }),
                              frame: true,
                              width: "100%",
                              height   : 'auto',
                              iconCls: 'icon-grid',
                              stripeRows: true,
                              autoHeight: true,
                              plugins: [summary,
                                        new Ext.ux.grid.RowEditor({
                                          saveText: 'Guardar',
                                          cancelText: 'Cancelar',
                                          errorSummary: false
                                        })
                              ],
                              columns: [
                                new xg.RowNumberer(),
                                {id:'data_pagamento', header: "Data", sortable: true, dataIndex: 'data', width:100, renderer: Ext.util.Format.dateRenderer('d-m-Y'), editor: { xtype: 'datefield', allowBlank: false, maxValue: (new Date()).format('m/d/Y') }},
                                {id:'tipo_pagamento', header: "Meio Pg", sortable: true, dataIndex: 'tipo_pagamento_nome_curto', width:100, editor:
                                  {editor: new Ext.form.ComboBox({
                                    store: new Ext.data.Store({
                                    // load using HTTP
                                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/pagamentos/tipos_pagamento.xml',
                                    autoLoad: true,
                                    // the return will be XML, so lets set up a reader
                                    reader: new Ext.data.XmlReader({
                                           record: 'tipo_pagamento',
                                           id: 'id',
                                           totalRecords: '@total'
                                       }, [
                                           'id', 'nome', 'nome_curto'
                                       ])
                                  }),
                                  valueField: 'id',
                                  displayField: 'nome_curto',
                                  typeAhead: true,
                                  mode: 'remote',
                                  forceSelection: true,
                                  triggerAction: 'all',
                                  emptyText:'Escolha...',
                                })}
                                },
                                {id:'observacoes', header: "Observações", sortable: true, dataIndex: 'observacoes', width:135, editor: { xtype: 'textfield', allowBlank: false }},
                                {id:'valor_pagamento', header: "Montante", sortable: true, dataIndex: 'valor', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco, editor: {xtype: 'numberfield', allowBlank: false, minValue: 1 }}
                              ],
                              tbar: new Ext.Toolbar({
                                items: [
                                  new Ext.Toolbar.Button({
                                    text: "Novo Pagamento",
                                    icon: "/images/add.png",
                                    disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                    handler: function(){
                                        var p = new pagamento({
                                            data: new Date(),
                                            tipo_pagamento_id: 0,
                                            observacoes: '',
                                            valor: 0
                                        });
                                        pagamentosGrid.plugins[1].stopEditing();
                                        pagamentosGrid.store.insert(0, p);
                                        pagamentosGrid.getView().refresh();
                                        pagamentosGrid.getSelectionModel().selectRow(0);
                                        pagamentosGrid.plugins[1].startEditing(0);
                                    }
                                  }),
                                  new Ext.Toolbar.Button({
                                    text: "Apagar",
                                    icon: "/images/delete.png",
                                    disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                    handler: function(){
                                      pagamentosGrid.plugins[1].stopEditing();
                                      pagamentosGrid.store.remove(pagamentoSelected);
                                      //var s = pagamentosGrid.getSelectionModel().getSelections();
                                      //for(var i = 0, r; r = s[i]; i++){
                                      //    pagamentosGrid.store.remove(r);
                                      //}
                                     }
                                  })
                                ]
                              }),
                              listeners: {
                                resize: function(el) {
                                        if (el.getInnerHeight() < 200) {
                                            el.autoHeight = false;
                                            el.setHeight(200);
                                        }
                                    }
                              }
                            })
                          ]
                      });
                    }
                    pagamentosWin.show();
                    //fs_edit.getForm().loadRecord(selectedElement);
                  }
                }
              }),
              new Ext.Toolbar.Button({
                text: "Fixar Preço",
                icon: "/images/lock.png",
                handler: function(){
                    var selectedElement = inscricaoSelected;
                    var selectedElementId = selectedElement.data.id;
                    selectedElementPreco = selectedElement.data.preco;
                    
                    if(!fixarPrecoWin){
                      fixarPrecoWin = new Ext.Window({
                          title    : 'Fixar Preço',
                          closable : true,
                          width    : 450,
                          height   : 'auto',
                          closeAction: 'close',
                          plain    : true,
                          autoScroll: true,
                          listeners: {
                            close: function(p){fixarPrecoWin = null;}
                          },
                          items    : [
                            fixa_preco_form_panel = new Ext.FormPanel({
                              frame: true,
                              labelAlign: 'right',
                              labelWidth: 100,
                              width:"100%",
                              margins: '10 10 10 10',
                              waitMsgTarget: true,
                              errorReader: new Ext.form.XmlErrorReader(),
                      
                              buttons: [
                                new Ext.Button({
                                  text     : 'Remover Fixação',
                                  icon     : '/images/cancel.png',
                                  handler  : function(){
                                    Ext.Ajax.request({
                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_preco_manual/'+selectedElementId,
                                      params: 'inscricao='+selectedElementId,
                                      waitMsg:'A processar o pedido...',
                                      success: function(result, request) {
                                        myStore.load({
                                          params: {
                                            start:currentPage*pageSize,
                                            limit:pageSize,
                                            query:query,
                                            sort: sort,
                                            dir : dir
                                          }}); fixarPrecoWin.close(); },
                                      failure: function(result, request) { alert("Houve um erro a remover a fixação de preço: "+result.responseText);},
                                   });
                                  }                                    
                                }),
                                new Ext.Button({
                                  text:"Fixar Preço",
                                  icon:"/images/pencil.png",
                                  handler: function(){
                                      fixa_preco_form_panel.getForm().submit({
                                        url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/fixa_preco_manual/'+selectedElementId,
                                        waitMsg:'A Registar Modifcações...',
                                        reset: true,
                                        success:function(){
                                          myStore.load({
                                            params: {
                                                start:currentPage*pageSize,
                                                limit:pageSize,
                                                query:query,
                                                sort: sort,
                                                dir : dir
                                              }
                                            });
                                          fixarPrecoWin.close();
                                        }
                                      });
                                    }
                                  })
                              ],
                              items: [
                                new Ext.form.FieldSet({
                                  title: 'Fixação de Preço',
                                  collapsible: false,
                                  autoHeight: true,
                                  defaultType: 'textfield',
                                  items: [
                                    {
                                      fieldLabel: 'Preço',
                                      name: 'preco',
                                      id: 'preco',
                                      width:250,
                                      blankText: "Este campo é obrigatório",
                                      value: selectedElementPreco
                                    }
                                  ]
                                })
                              ]
                            })
                          ]
                      })
                      fixarPrecoWin.show();
                    }
                }
              }),
              new Ext.Toolbar.Separator(),
            <% else %>
              {
                text:'Facturação',
                icon:'/images/money.png',
                menu:
                  new Ext.menu.Menu({
                    id: 'menuFacturacao',
                    style: {
                        overflow: 'visible'     // For the Combo popup
                    },
                    disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                    items: [
                         { text: "Facturas",
                           icon: "/images/money.png",
                           disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                           listeners : {
                              click: function() {
                                var selectedElement = inscricaoSelected;
                                var selectedElementId = selectedElement.data.id;
                                if(!facturasWin){
                                  facturasWin = new Ext.Window({
                                      title    : 'Facturas',
                                      closable : true,
                                      width    : 650,
                                      height   : 'auto',
                                      closeAction: 'close',
                                      plain    : true,
                                      autoScroll: true,
                                      listeners: {
                                        close: function(){facturasWin = null;}
                                      },
                                      items    : [
                                        facturasGrid = new xg.GridPanel({
                                          store: new Ext.data.Store({
                                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/recibos_inscricao/'+selectedElementId+'.xml',
                                                      reader: new Ext.data.XmlReader({
                                                                  record: "recibo",
                                                                  id: "id"
                                                              }, factura),
                                                      remote: true,
                                                      autoLoad: true
                                                  }),
                                          sm: new Ext.grid.RowSelectionModel({
                                            singleSelect:true,
                                            listeners: {
                                              rowselect:
                                               function(smObj, rowIndex, record) {
                                                  facturaSelected = record;
                                               }
                                            }
                                          }),
                                          frame: true,
                                          width: "100%",
                                          height   : 'auto',
                                          iconCls: 'icon-grid',
                                          stripeRows: true,
                                          autoHeight: true,
                                          plugins: [new Ext.ux.grid.GridSummary()],
                                          columns: [
                                            new xg.RowNumberer(),
                                            {id:'nivel_alerta', header: "", sortable: true, dataIndex: 'nivel_alerta', renderer:nivel_alerta, width:40},
                                            {id:'id', header: "Nº", sortable: true, dataIndex: 'id', width:40},
                                            {id:'nome_factura', header: "Nome", sortable: true, dataIndex: 'nome', width:235 },
                                            {id:'total_factura', header: "Total", sortable: true, dataIndex: 'total', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco },
                                            {id:'pago_factura', header: "Pago", sortable: true, dataIndex: 'pago', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco },
                                            {id:'desconto_factura', header: "Desconto", sortable: true, dataIndex: 'desconto', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco },
                                            {id:'divida_factura', header: "Divida", sortable: true, dataIndex: 'divida', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco },
                                            {id:'estado', header: "", sortable: true, dataIndex: 'estado', renderer:estado_recibo, width:40}
                                          ],
                                          tbar: new Ext.Toolbar({
                                            items: [
                                              new Ext.Toolbar.Button({
                                                text: "Pagamentos da Factura",
                                                icon: "/images/money.png",
                                                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                handler: function(){
                                                  var factSelectedElement = facturaSelected;
                                                  factSelectedElementId = factSelectedElement.data.id;
                                                  if(!pagamentosWin){
                                                    pagamentosWin = new Ext.Window({
                                                        title    : 'Pagamentos',
                                                        closable : true,
                                                        width    : 550,
                                                        height   : 'auto',
                                                        closeAction: 'hide',
                                                        plain    : true,
                                                        autoScroll: true,
                                                        listeners: {
                                                          hide: function(){pagamentosWin = null;}
                                                        },
                                                        items    : [
                                                          pagamentosGrid = new xg.GridPanel({
                                                            store: new Ext.data.Store({
                                                                        url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/pagamentos_recibo/'+factSelectedElementId+'.xml',
                                                                        sortInfo:{field: 'data', direction: "ASC"},
                                                                        reader: new Ext.data.XmlReader({
                                                                                    record: "pagamento",
                                                                                    id: "id"
                                                                                }, pagamento),
                                                                        remote: true,
                                                                        autoLoad: true,
                                                                        listeners: {
                                                                            update: function(store, record, op){
                                                                              Ext.Msg.show({
                                                                                title:'Enviar Email?',
                                                                                msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                                                                                buttons: Ext.Msg.YESNOCANCEL,
                                                                                fn: function(btn){
                                                                                      sendEmail = 0;
                                                                                      if(btn == 'yes'){
                                                                                        sendEmail = 1
                                                                                      }
                                                                                      if(btn != 'cancel'){
                                                                                        Ext.MessageBox.show({
                                                                                            msg: 'A Registar o Pagamento',
                                                                                            progressText: 'Registando...',
                                                                                            width:300,
                                                                                            wait:true,
                                                                                            waitConfig: {interval:200},
                                                                                        });
                                                                                        Ext.Ajax.request({
                                                                                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/regista_ou_actualiza_pagamento/',
                                                                                          success: function(){
                                                                                            Ext.MessageBox.hide();
                                                                                            Ext.Msg.alert("Operação Concluída","Pagamento registado com sucesso");
                                                                                            pagamentosGrid.store.load();
                                                                                            facturasGrid.store.load();
                                                                                          },
                                                                                          failure: function(){
                                                                                            Ext.MessageBox.hide();
                                                                                            Ext.Msg.alert("Erro","Pagamento não registado");
                                                                                            pagamentosGrid.store.load();
                                                                                            facturasGrid.store.load();
                                                                                          },
                                                                                          params: {
                                                                                            pagamentoId: record.data.id,
                                                                                            pagamentoData: record.data.data,
                                                                                            pagamentoValor: record.data.valor,
                                                                                            pagamentoObs: record.data.observacoes,
                                                                                            pagamentoRecibo: factSelectedElementId,
                                                                                            pagamentoTipo:  record.data.tipo_pagamento_nome_curto,
                                                                                            sendEmail: sendEmail
                                                                                          }
                                                                                       });
                                                                                      }
                                                                                    },
                                                                                animEl: 'elId',
                                                                                icon: Ext.MessageBox.QUESTION
                                                                             });
                                                                            },
                                                                            remove: function(store, record, op){
                                                                              Ext.MessageBox.show({
                                                                                  msg: 'A Eliminar o Pagamento',
                                                                                  progressText: 'Eliminando...',
                                                                                  width:300,
                                                                                  wait:true,
                                                                                  waitConfig: {interval:200},
                                                                              });
                                                                              Ext.Ajax.request({
                                                                                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_pagamento/'+record.data.id,
                                                                                    success: function(){
                                                                                      Ext.MessageBox.hide();
                                                                                      Ext.Msg.alert("Operação Concluída","Pagamento eliminado com sucesso");
                                                                                      pagamentosGrid.store.load();
                                                                                      facturasGrid.store.load();
                                                                                    },
                                                                                    failure: function(){
                                                                                      Ext.MessageBox.hide();
                                                                                      Ext.Msg.alert("Erro","Pagamento não eliminado");
                                                                                      pagamentosGrid.store.load();
                                                                                      facturasGrid.store.load();
                                                                                    },
                                                                                 });
                                                                            }
                                                                        }
                                                                    }),
                                                            sm: new Ext.grid.RowSelectionModel({
                                                              singleSelect:true,
                                                              listeners: {
                                                                rowselect:
                                                                 function(smObj, rowIndex, record) {
                                                                    pagamentoSelected = record;
                                                                 }
                                                              }
                                                            }),
                                                            frame: true,
                                                            width: "100%",
                                                            height   : 'auto',
                                                            iconCls: 'icon-grid',
                                                            stripeRows: true,
                                                            autoHeight: true,
                                                            plugins: [new Ext.ux.grid.GridSummary(),
                                                                      new Ext.ux.grid.RowEditor({
                                                                        saveText: 'Guardar',
                                                                        cancelText: 'Cancelar',
                                                                        errorSummary: false
                                                                      })
                                                            ],
                                                            columns: [
                                                              new xg.RowNumberer(),
                                                              {id:'data_pagamento', header: "Data", sortable: true, dataIndex: 'data', width:100, renderer: Ext.util.Format.dateRenderer('d-m-Y'), editor: { xtype: 'datefield', allowBlank: false, maxValue: (new Date()).format('m/d/Y') }},
                                                              {id:'tipo_pagamento', header: "Meio Pg", sortable: true, dataIndex: 'tipo_pagamento_nome_curto', width:100, editor:
                                                                {editor: new Ext.form.ComboBox({
                                                                  store: new Ext.data.Store({
                                                                  // load using HTTP
                                                                  url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/pagamentos/tipos_pagamento.xml',
                                                                  autoLoad: true,
                                                                  // the return will be XML, so lets set up a reader
                                                                  reader: new Ext.data.XmlReader({
                                                                         record: 'tipo_pagamento',
                                                                         id: 'id',
                                                                         totalRecords: '@totalCount'
                                                                     }, [
                                                                         'id', 'nome', 'nome_curto'
                                                                     ])
                                                                  }),
                                                                  valueField: 'id',
                                                                  displayField: 'nome_curto',
                                                                  typeAhead: true,
                                                                  mode: 'remote',
                                                                  forceSelection: true,
                                                                  triggerAction: 'all',
                                                                  emptyText:'Escolha...'
                                                                })}
                                                              },
                                                              {id:'observacoes', header: "Observações", sortable: true, dataIndex: 'observacoes', width:130, editor: { xtype: 'textfield', allowBlank: false }},
                                                              {id:'valor_pagamento', header: "Montante", sortable: true, dataIndex: 'valor', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco, editor: {xtype: 'numberfield', allowBlank: false, minValue: 1 }},
                                                            ],
                                                            tbar: new Ext.Toolbar({
                                                              items: [
                                                                new Ext.Toolbar.Button({
                                                                  text: "Novo Pagamento",
                                                                  icon: "/images/add.png",
                                                                  disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                                  handler: function(){
                                                                      var p = new pagamento({
                                                                          data: new Date(),
                                                                          observacoes: '',
                                                                          valor: 0
                                                                      });
                                                                      pagamentosGrid.plugins[1].stopEditing();
                                                                      pagamentosGrid.store.insert(0, p);
                                                                      pagamentosGrid.getView().refresh();
                                                                      pagamentosGrid.getSelectionModel().selectRow(0);
                                                                      pagamentosGrid.plugins[1].startEditing(0);
                                                                  }
                                                                }),
                                                                new Ext.Toolbar.Button({
                                                                  text: "Apagar",
                                                                  icon: "/images/delete.png",
                                                                  disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                                  handler: function(){
                                                                    pagamentosGrid.plugins[1].stopEditing();
                                                                    var s = pagamentosGrid.getSelectionModel().getSelections();
                                                                    for(var i = 0, r; r = s[i]; i++){
                                                                        pagamentosGrid.store.remove(r);
                                                                    }
                                                                   }
                                                                })
                                                              ]
                                                            }),
                                                            listeners: {
                                                              resize: function(el) {
                                                                      if (el.getInnerHeight() < 200) {
                                                                          el.autoHeight = false;
                                                                          el.setHeight(200);
                                                                      }
                                                                  }
                                                            }
                                                          })
                                                        ]
                                                    });
                                                  }
                                                  pagamentosWin.show();
                                                  //fs_edit.getForm().loadRecord(selectedElement);
                                                }
                                              }),
                                              new Ext.Toolbar.Button({
                                                text: "Exportar",
                                                icon: "/images/page_go.png",
                                                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                handler: function(){
                                                  var factSelectedElement = facturaSelected;
                                                  factSelectedElementId = factSelectedElement.data.id;
                                                  window.location = "/<%= @entidade.sigla %>/<%= @event.codigo %>/recibos/detalhe/"+factSelectedElementId+".pdf";
                                                 }
                                              })
                                            ]
                                          }),
                                          listeners: {
                                            resize: function(el) {
                                                    if (el.getInnerHeight() < 250) {
                                                        el.autoHeight = false;
                                                        el.setHeight(250);
                                                    }
                                                }
                                          }
                                        })
                                      ]
                                  });
                                }
                                facturasWin.show();
                                //fs_edit.getForm().loadRecord(selectedElement);
                              }
                            }
                         },
                         { text: "Consumos",
                           icon: "/images/money.png",
                           disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                           listeners :
                            {
                              click: function() {
                                var selectedElement = inscricaoSelected;
                                var selectedElementId = selectedElement.data.id;
                                if(!consumosWin){
                                  consumosWin = new Ext.Window({
                                      title    : 'Consumos',
                                      closable : true,
                                      width    : 650,
                                      height   : 'auto',
                                      closeAction: 'close',
                                      plain    : true,
                                      autoScroll: true,
                                      listeners: {
                                        close: function(){consumosWin = null;}
                                      },
                                      items    : [
                                        consumosGrid = new xg.GridPanel({
                                          store: new Ext.data.Store({
                                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/consumos_inscricao/'+selectedElementId+'.xml',
                                                      reader: new Ext.data.XmlReader({
                                                                  record: "consumo",
                                                                  id: "id"
                                                              }, consumo),
                                                      remote: true,
                                                      autoLoad: true,
                                                      listeners: {
                                                          update: function(store, record, op){
                                                            Ext.Msg.show({
                                                                title:'Enviar Email?',
                                                                msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                                                                buttons: Ext.Msg.YESNOCANCEL,
                                                                fn: function(btn){
                                                                      sendEmail = 0;
                                                                      if(btn == 'yes'){
                                                                        sendEmail = 1
                                                                      }
                                                                      if(btn != 'cancel'){
                                                                        Ext.MessageBox.show({
                                                                            msg: 'A Registar o Consumo',
                                                                            progressText: 'Registando...',
                                                                            width:300,
                                                                            wait:true,
                                                                            waitConfig: {interval:200},
                                                                        });
                                                                        Ext.Ajax.request({
                                                                              url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/inscricoes/add_consumo_to_inscricao.xml',
                                                                              success: function(){
                                                                                Ext.MessageBox.hide();
                                                                                Ext.Msg.alert("Operação Concluída","Consumo registado com sucesso");
                                                                                consumosGrid.store.load();
                                                                              },
                                                                              failure: function(){
                                                                                Ext.MessageBox.hide();
                                                                                Ext.Msg.alert("Operação Não Concluída","Consumo não registado com sucesso");
                                                                                consumosGrid.store.load();
                                                                              },
                                                                              params: {
                                                                                consumoId: record.data.id,
                                                                                consumoProdutoId: record.data.produto_descricao,
                                                                                pagamentoInscricao: selectedElementId,
                                                                                sendEmail: sendEmail
                                                                              }
                                                                           });
                                                                      }
                                                                    },
                                                                animEl: 'elId',
                                                                icon: Ext.MessageBox.QUESTION
                                                             });
                                                            
                                                          },
                                                          remove: function(store, record, op){
                                                            Ext.Msg.show({
                                                                title:'Enviar Email?',
                                                                msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                                                                buttons: Ext.Msg.YESNOCANCEL,
                                                                fn: function(btn){
                                                                      sendEmail = 0;
                                                                      if(btn == 'yes'){
                                                                        sendEmail = 1
                                                                      }
                                                                      if(btn != 'cancel'){
                                                                        Ext.MessageBox.show({
                                                                            msg: 'A Eliminar o Consumo',
                                                                            progressText: 'Eliminando...',
                                                                            width:300,
                                                                            wait:true,
                                                                            waitConfig: {interval:200},
                                                                            icon:'/images/delete.png'
                                                                        });
                                                                        Ext.Ajax.request({
                                                                              url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/inscricoes/elimina_consumo.xml',
                                                                              success: function(){
                                                                                Ext.MessageBox.hide();
                                                                                Ext.Msg.alert("Operação Concluída","Consumo apagado com sucesso");
                                                                                consumosGrid.store.load()
                                                                              },
                                                                              failure: function(){
                                                                                Ext.MessageBox.hide();
                                                                                Ext.Msg.alert("Operação Não Concluída","O Consumo não foi apagado com sucesso");
                                                                                consumosGrid.store.load();
                                                                              },
                                                                              params: {
                                                                                consumoId: record.data.id,
                                                                                sendEmail: sendEmail
                                                                              }
                                                                           });
                                                                      }
                                                                }
                                                          })
                                                      }
                                                    }
                                                  }),
                                          sm: new Ext.grid.RowSelectionModel({
                                            singleSelect:true,
                                            listeners: {
                                              rowselect:
                                               function(smObj, rowIndex, record) {
                                                  consumoSelected = record;
                                               }
                                            }
                                          }),
                                          frame: true,
                                          width: "100%",
                                          height   : 'auto',
                                          iconCls: 'icon-grid',
                                          stripeRows: true,
                                          autoHeight: true,
                                          plugins: [summary,
                                                    new Ext.ux.grid.RowEditor({
                                                      saveText: 'Guardar',
                                                      cancelText: 'Cancelar',
                                                      errorSummary: false
                                                    })
                                          ],
                                          columns: [
                                            new xg.RowNumberer(),
                                            {id:'desc_produto', header: "Produto", sortable: true, dataIndex: 'produto_descricao', width:450,
                                              editor: new Ext.form.ComboBox({
                                                  store: new Ext.data.Store({
                                                  // load using HTTP
                                                  url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/produtos/lista.xml',
                                                  autoLoad: true,
                                                  // the return will be XML, so lets set up a reader
                                                  reader: new Ext.data.XmlReader({
                                                         record: 'produto',
                                                         id: 'id',
                                                         totalRecords: '@total'
                                                     }, [
                                                         'id', 'descricao'
                                                     ])
                                                }),
                                                valueField: 'id',
                                                displayField: 'descricao',
                                                typeAhead: true,
                                                mode: 'remote',
                                                forceSelection: true,
                                                triggerAction: 'all',
                                                emptyText:'Escolha...',
                                              })
                                            },
                                            {id:'preco', header: "Preço", sortable: true, dataIndex: 'preco', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco },
                                            {id:'recibo', header: "Factura", sortable: true, dataIndex: 'recibo_id', width:70 }
                                          ],
                                          tbar: new Ext.Toolbar({
                                            items: [
                                              new Ext.Toolbar.Button({
                                                text: "Novo Consumo",
                                                icon: "/images/add.png",
                                                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                handler: function(){
                                                    var p = new consumo({
                                                    });
                                                    consumosGrid.plugins[1].stopEditing();
                                                    consumosGrid.store.insert(0, p);
                                                    consumosGrid.getView().refresh();
                                                    consumosGrid.getSelectionModel().selectRow(0);
                                                    consumosGrid.plugins[1].startEditing(0);
                                                }
                                              }),
                                              new Ext.Toolbar.Button({
                                                text: "Apagar",
                                                icon: "/images/delete.png",
                                                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                handler: function(){
                                                  consumosGrid.plugins[1].stopEditing();
                                                  var s = consumosGrid.getSelectionModel().getSelections();
                                                  for(var i = 0, r; r = s[i]; i++){
                                                      consumosGrid.store.remove(r);
                                                  }
                                                 }
                                              }),
                                              new Ext.Toolbar.Separator(),
                                              new Ext.Toolbar.Button({
                                                text: "Exportar Factura",
                                                icon: "/images/page_go.png",
                                                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                                  handler: function(){
                                                    var selectedElement = consumoSelected;
                                                    selectedElementId = selectedElement.data.recibo_id;
                                                    window.location = "/<%= @entidade.sigla %>/<%= @event.codigo %>/recibos/detalhe/"+selectedElementId+".pdf";
                                                   }
                                              })
                                            ]
                                          }),
                                          listeners: {
                                            resize: function(el) {
                                                    if (el.getInnerHeight() < 300) {
                                                        el.autoHeight = false;
                                                        el.setHeight(300);
                                                    }
                                                }
                                          }
                                        })
                                      ]
                                  });
                                }
                                consumosWin.show();
                              }
                          }
                        },
                         { text: "Descontos",
                           icon: "/images/money.png",
                           disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                           listeners :
                          {
                            click: function() {
                              var selectedElement = inscricaoSelected;
                              var selectedElementId = selectedElement.data.id;
                              if(!descontosWin){
                                descontosWin = new Ext.Window({
                                    title    : 'Descontos',
                                    closable : true,
                                    width    : 650,
                                    height   : 'auto',
                                    closeAction: 'close',
                                    plain    : true,
                                    autoScroll: true,
                                    listeners: {
                                      close: function(){descontosWin = null;}
                                    },
                                    items    : [
                                      descontosGrid = new xg.GridPanel({
                                        store: new Ext.data.Store({
                                                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/descontos_inscricao/'+selectedElementId+'.xml',
                                                    reader: new Ext.data.XmlReader({
                                                                record: "desconto",
                                                                id: "id"
                                                            }, desconto),
                                                    remote: true,
                                                    autoLoad: true,
                                                    listeners: {
                                                        update: function(store, record, op){
                                                          Ext.Msg.show({
                                                              title:'Enviar Email?',
                                                              msg: 'Deseja que seja enviado um e-mail para o responsável pela factura, para que ele tome conhecimento desta alteração?',
                                                              buttons: Ext.Msg.YESNOCANCEL,
                                                              fn: function(btn){
                                                                    sendEmail = 0;
                                                                    if(btn == 'yes'){
                                                                      sendEmail = 1
                                                                    }
                                                                    if(btn != 'cancel'){
                                                                      Ext.MessageBox.show({
                                                                          msg: 'A Registar o Desconto',
                                                                          progressText: 'Registando...',
                                                                          width:300,
                                                                          wait:true,
                                                                          waitConfig: {interval:200},
                                                                      });
                                                                      Ext.Ajax.request({
                                                                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/inscricoes/add_desconto_to_inscricao.xml',
                                                                            success: function(){
                                                                                Ext.MessageBox.hide();
                                                                                Ext.Msg.alert("Operação Concluída","Desconto registado com sucesso");
                                                                                store.load();
                                                                            },
                                                                            failure: function(){
                                                                              Ext.MessageBox.hide();
                                                                              Ext.Msg.alert("Operação Não Concluída","Desconto não registado.");
                                                                              store.load();
                                                                            },
                                                                            params: {
                                                                              descontoId: record.data.id,
                                                                              descontoDescontoId: record.data.desconto_descricao,
                                                                              descontoInscricao: selectedElementId,
                                                                              sendEmail: sendEmail
                                                                            }
                                                                         });
                                                                    }
                                                                  },
                                                              animEl: 'elId',
                                                              icon: Ext.MessageBox.QUESTION
                                                           });
                                                          
                                                        },
                                                        remove: function(store, record, op){
                                                          Ext.Msg.show({
                                                              title:'Enviar Email?',
                                                              msg: 'Deseja que seja enviado um e-mail para o responsável pela factura, para que ele tome conhecimento desta alteração?',
                                                              buttons: Ext.Msg.YESNOCANCEL,
                                                              fn: function(btn){
                                                                    sendEmail = 0;
                                                                    if(btn == 'yes'){
                                                                      sendEmail = 1
                                                                    }
                                                                    if(btn != 'cancel'){
                                                                      Ext.MessageBox.show({
                                                                          msg: 'A Eliminar o Desconto',
                                                                          progressText: 'Eliminando...',
                                                                          width:300,
                                                                          wait:true,
                                                                          waitConfig: {interval:200},
                                                                          icon:'/images/delete.png'
                                                                      });
                                                                      Ext.Ajax.request({
                                                                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/inscricoes/elimina_desconto.xml',
                                                                            success: function(){
                                                                                Ext.MessageBox.hide();
                                                                                Ext.Msg.alert("Operação Concluída","Desconto apagado com sucesso");
                                                                                store.load();
                                                                            },
                                                                            failure: function(){
                                                                              Ext.MessageBox.hide();
                                                                              Ext.Msg.alert("Operação Não Concluída","O Desconto não foi apagado.");
                                                                              store.load();
                                                                            },
                                                                            params: {
                                                                              descontoId: record.data.id,
                                                                              sendEmail: sendEmail
                                                                            }
                                                                         });
                                                                    }
                                                              }
                                                        })
                                                    }
                                                  }
                                                }),
                                        sm: new Ext.grid.RowSelectionModel({
                                          singleSelect:true,
                                          listeners: {
                                            rowselect:
                                             function(smObj, rowIndex, record) {
                                                descontoSelected = record;
                                             }
                                          }
                                        }),
                                        frame: true,
                                        width: "100%",
                                        height   : 'auto',
                                        iconCls: 'icon-grid',
                                        stripeRows: true,
                                        autoHeight: true,
                                        plugins: [summary,
                                                  new Ext.ux.grid.RowEditor({
                                                    saveText: 'Guardar',
                                                    cancelText: 'Cancelar',
                                                    errorSummary: false
                                                  })
                                        ],
                                        columns: [
                                          new xg.RowNumberer(),
                                          {id:'desc_desconto', header: "Desconto", sortable: true, dataIndex: 'desconto_descricao', width:470,
                                            editor: new Ext.form.ComboBox({
                                                store: new Ext.data.Store({
                                                // load using HTTP
                                                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/descontos/lista.xml',
                                                autoLoad: true,
                                                // the return will be XML, so lets set up a reader
                                                reader: new Ext.data.XmlReader({
                                                       record: 'desconto',
                                                       id: 'id',
                                                       totalRecords: '@total'
                                                   }, [
                                                       'id', 'descricao'
                                                   ])
                                              }),
                                              valueField: 'id',
                                              displayField: 'descricao',
                                              typeAhead: true,
                                              mode: 'remote',
                                              forceSelection: true,
                                              triggerAction: 'all',
                                              emptyText:'Escolha...',
                                            })
                                          },
                                          {id:'valor', header: "Valor", sortable: true, dataIndex: 'valor', renderer:preco, width:80, summaryType:'sum', summaryRenderer:preco }
                                        ],
                                        tbar: new Ext.Toolbar({
                                          items: [
                                            new Ext.Toolbar.Button({
                                              text: "Novo Desconto",
                                              icon: "/images/add.png",
                                              disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                              handler: function(){
                                                  var p = new desconto({
                                                  });
                                                  descontosGrid.plugins[1].stopEditing();
                                                  descontosGrid.store.insert(0, p);
                                                  descontosGrid.getView().refresh();
                                                  descontosGrid.getSelectionModel().selectRow(0);
                                                  descontosGrid.plugins[1].startEditing(0);
                                              }
                                            }),
                                            new Ext.Toolbar.Button({
                                              text: "Apagar",
                                              icon: "/images/delete.png",
                                              disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                              handler: function(){
                                                descontosGrid.plugins[1].stopEditing();
                                                var s = descontosGrid.getSelectionModel().getSelections();
                                                for(var i = 0, r; r = s[i]; i++){
                                                    descontosGrid.store.remove(r);
                                                }
                                               }
                                            })
                                          ]
                                        }),
                                        listeners: {
                                          resize: function(el) {
                                                  if (el.getInnerHeight() < 300) {
                                                      el.autoHeight = false;
                                                      el.setHeight(300);
                                                  }
                                              }
                                        }
                                      })
                                    ]
                                });
                              }
                              descontosWin.show();
                            }
                          }
                         }
                      ]
                    })
              },
            new Ext.Toolbar.Separator(),
            <% end %>
            
            <% if(@event.precisa_recomendacao) %>
              new Ext.Toolbar.Button({
                text: "Recomendações",
                icon: "/images/thumb_up.png",
                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_LEITURA" ||@current_user.profile == "EVENTO_ESCRITA" || @current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                listeners :
                {
                  click: function() {
                    var selectedElement = inscricaoSelected;
                    var selectedElementId = selectedElement.data.id;
                    if(!recomendacoesWin){
                      recomendacoesWin = new Ext.Window({
                          title    : 'Recomendações',
                          closable : true,
                          width    : 450,
                          height   : 'auto',
                          closeAction: 'close',
                          plain    : true,
                          autoScroll: true,
                          listeners: {
                            close: function(){recomendacoesWin = null;}
                          },
                          items    : [
                            recomendacoesGrid = new xg.GridPanel({
                              store: new Ext.data.Store({
                                          data: myStore.reader.xmlData,
                                          sortInfo:{field: 'data', direction: "ASC"},
                                          reader: new Ext.data.XmlReader({
                                                      record: "inscricao/recomendacoes/recomendacao[inscricaoId="+selectedElementId+"]",
                                                      id: "id"
                                                  }, recomendacao),
                                          remote: true,
                                          autoLoad: true,
                                          listeners: {
                                              update: function(store, record, op){
                                                Ext.Ajax.request({
                                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/regista_ou_actualiza_recomendacao/',
                                                      success: function(){
                                                        req = Ext.Ajax.request({
                                                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_inscricoes.xml',
                                                          success: function(){
                                                            myStore.loadData(req.conn.responseXML);
                                                            store.loadData(req.conn.responseXML);
                                                          },
                                                          params: {
                                                              start:currentPage*pageSize,
                                                              limit:pageSize,
                                                              query:query,
                                                              sort: sort,
                                                              dir : dir
                                                          }
                                                        })
                                                      },
                                                      failure: function(){alert("falhou!!");},
                                                      params: {
                                                        recomendacaoId: record.data.id,
                                                        recomendacaoAssinatura: record.data.assinatura,
                                                        recomendacaoInscricao: selectedElementId
                                                      }
                                                   });
                                              },
                                              remove: function(store, record, op){
                                                Ext.Ajax.request({
                                                      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_recomendacao/'+record.data.id,
                                                      success: function(){
                                                        req = Ext.Ajax.request({
                                                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_inscricoes.xml',
                                                          success: function(){
                                                            myStore.loadData(req.conn.responseXML);
                                                            store.loadData(req.conn.responseXML);
                                                          },
                                                          params: {
                                                              start:currentPage*pageSize,
                                                              limit:pageSize,
                                                              query:query,
                                                              sort: sort,
                                                              dir : dir
                                                          }
                                                        })
                                                      },
                                                      failure: function(){alert("falhou!!");},
                                                   });
                                              }
                                          }
                                      }),
                              sm: new Ext.grid.RowSelectionModel({
                                singleSelect:true,
                                listeners: {
                                  rowselect:
                                   function(smObj, rowIndex, record) {
                                      recomendacaoSelected = record;
                                   }
                                }
                              }),
                              frame: true,
                              width: "100%",
                              height   : 'auto',
                              iconCls: 'icon-grid',
                              stripeRows: true,
                              autoHeight: true,
                              plugins: [new Ext.ux.grid.RowEditor({
                                          saveText: 'Guardar',
                                          cancelText: 'Cancelar',
                                          errorSummary: false
                                        })
                              ],
                              columns: [
                                new xg.RowNumberer(),
                                {id:'data_recomendacao', header: "Data", sortable: true, dataIndex: 'data', width:82, renderer: Ext.util.Format.dateRenderer('d-m-Y') },
                                {id:'user', header: "User", sortable: true, dataIndex: 'user', width:80 },
                                {id:'assinatura', header: "Assinatura", sortable: true, dataIndex: 'assinatura', width:233, editor: {xtype: 'textfield', allowBlank: false }}
                              ],
                              tbar: new Ext.Toolbar({
                                items: [
                                  new Ext.Toolbar.Button({
                                    text: "Nova Recomendação",
                                    icon: "/images/add.png",
                                    disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_ESCRITA" || @current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                    handler: function(){
                                        var p = new recomendacao({
                                            data: '',
                                            assinatura: '',
                                            user: '<% @current_user.login %>'
                                        });
                                        recomendacoesGrid.plugins[0].stopEditing();
                                        recomendacoesGrid.store.insert(0, p);
                                        recomendacoesGrid.getView().refresh();
                                        recomendacoesGrid.getSelectionModel().selectRow(0);
                                        recomendacoesGrid.plugins[0].startEditing(0);
                                    }
                                  }),
                                  new Ext.Toolbar.Button({
                                    text: "Apagar",
                                    icon: "/images/delete.png",
                                    disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_ESCRITA" || @current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                    handler: function(){
                                      recomendacoesGrid.plugins[0].stopEditing();
                                      var s = recomendacoesGrid.getSelectionModel().getSelections();
                                      for(var i = 0, r; r = s[i]; i++){
                                          recomendacoesGrid.store.remove(r);
                                      }
                                     }
                                  })
                                ]
                              }),
                              listeners: {
                                resize: function(el) {
                                        if (el.getInnerHeight() < 200) {
                                            el.autoHeight = false;
                                            el.setHeight(200);
                                        }
                                    }
                              }
                            })
                          ]
                      });
                    }
                    recomendacoesWin.show();
                  }
                }
              }),
              new Ext.Toolbar.Separator(),
             <% end %>
             {
              text:'Exportar...',
              icon:'/images/group_go.png',
              menu: 
                new Ext.menu.Menu({
                   id: 'menuExportacao',
                   style: {
                       overflow: 'visible'     // For the Combo popup
                   },
                   items: [
                     {
                       text: "Exportar Lista",
                       icon: "/images/page_excel.png",
                       listeners :
                       {
                         click: function() {
                           window.location = "/<%=@entidade.sigla%>/<%= @event.codigo %>/admin/lista_inscricoes.xls?sort=<%=nome_field_name%>&dir=ASC"
                         }
                       }
                     },
                     {
                        text: "Exportar Inscrição",
                        icon: "/images/page_green.png",
                        listeners :
                        {
                          click: function() {
                            var selectedElementId = inscricaoSelected.data.id;
                            window.location= "/<%=@entidade.sigla%>/<%=@event.codigo%>/inscricoes/detalhe/"+selectedElementId+".pdf"
                          }
                        }
                      },
                      {
                        text: "Exportar Grupo",
                        icon: "/images/group_go.png",
                        listeners :
                        {
                          click: function() {
                            var selectedElementId = inscricaoSelected.data.id;
                            window.location= "/<%=@entidade.sigla%>/<%=@event.codigo%>/inscricoes/grupo/"+selectedElementId+".pdf"
                          }
                        }
                      }
                   ]
                })
             },
             new Ext.Toolbar.Separator(),
             new Ext.Toolbar.Button({
                text: "Reservas",
                icon: "/images/tag_blue.png",
                listeners :
                {
                  click: function() {
                    var selectedElement = inscricaoSelected;
                    //selectedElementBadgeString = selectedElement.data.badge_printing_string;
                    window.location="/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/report_reservas.pdf?ids="+selectedElement.data.id
                    //window.location=selectedElementBadgeString+"&tipo_etiqueta=reservas";
                  }
                }
             }),
             new Ext.Toolbar.Button({
                text: "Identificação",
                icon: "/images/tag_green.png",
                listeners :
                {
                  click: function() {
                    var selectedElement = inscricaoSelected;
                    //selectedElementBadgeString = selectedElement.data.badge_printing_string;
                    //window.location=selectedElementBadgeString+"&tipo_etiqueta=nome";
                  }
                }
             })
          ]
        }),
        bbar: new Ext.PagingToolbar({
            pageSize: pageSize,
            store: myStore,
            displayInfo: true,
            displayMsg: 'A mostrar inscrições {0} a {1} de {2}',
            emptyMsg: "Sem inscrições para mostrar",
            beforePageText: "Página",
            firstText: "Primeira Página",
            lastText: "Última Página",
            nextText: "Próxima Página",
            prevText: "Página Anterior",
            refreshText: "Actualizar inscrições",
            listeners: {
              change: function(tb, pageData){
                currentPage = pageData.activePage-1;
              }
            }
        })
    });
   
   
   var consumosTreeWin;
   
   
   var facturasReader = new Ext.data.XmlReader({
        record: "recibo",     // The repeated element which contains row information
        id: "id",                // The element within the row that provides an ID for the record (optional)
        totalRecords: "totalCount"
     }, facturaFull);
   
   
   var facturasStore = new Ext.data.GroupingStore({
      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_recibos.xml',
      reader: facturasReader,
      //remoteSort: true,
      remote: true,
      totalProperty: "totalCount",
      autoLoad: false,
      sortInfo: {
          field: 'id',
          direction: 'ASC' // or 'DESC' (case sensitive for local sorting),
      },
      listeners: {
        exception:
          function(dataProxy,type,action,options,response,arg) {
              alert("exception");
          },
        update:
          function(store, record, op){
              Ext.MessageBox.show({
                  msg: 'A Registar a Factura',
                  progressText: 'Registando...',
                  width:300,
                  wait:true,
                  waitConfig: {interval:200},
              });
              Ext.Ajax.request({
                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/create_or_update_recibo.xml',
                success: function(){
                  req = Ext.Ajax.request({
                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_recibos.xml',
                    success: function(){
                      Ext.MessageBox.hide();
                      Ext.Msg.alert("Operação Concluída","Factura registada com sucesso");
                      facturasStore.loadData(req.conn.responseXML);
                    }
                  })
                },
                failure: function(){
                  req = Ext.Ajax.request({
                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_recibos.xml',
                    success: function(){
                      Ext.MessageBox.hide();
                      Ext.Msg.alert("Operação Não Concluída","Factura não registada.");
                      facturasStore.loadData(req.conn.responseXML);
                    }
                  })
                },
                params: {
                  reciboId: record.data.id,
                  reciboNome: record.data.nome,
                  reciboData:  record.data.data,
                  reciboNif: record.data.nif
                }
              });
        },
        remove: function(store, record, op){
          Ext.Msg.show({
              title:'Confirmar Operação',
              msg: '<b>Tem a certeza que deseja eliminar esta factura?</b><br/><br/>Só será eliminada se não tiver consumos nem pagamentos associados.',
              buttons: Ext.Msg.YESNO,
              fn: function(btn){
                    if(btn == 'yes'){
                      Ext.MessageBox.show({
                          msg: 'A Eliminar a Factura',
                          progressText: 'Eliminando...',
                          width:300,
                          wait:true,
                          waitConfig: {interval:200},
                          icon:'/images/delete.png'
                      });
                      Ext.Ajax.request({
                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_recibo.xml',
                            success: function(){
                              req = Ext.Ajax.request({
                                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_recibos.xml',
                                success: function(){
                                  Ext.MessageBox.hide();
                                  Ext.Msg.alert("Operação Concluída","Factura eliminada com sucesso");
                                  facturasStore.loadData(req.conn.responseXML);
                                }
                              })
                            },
                            failure: function(){
                              req = Ext.Ajax.request({
                                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_recibos.xml',
                                success: function(){
                                  Ext.MessageBox.hide();
                                  Ext.Msg.alert("Operação Não Concluída","A Factura não foi apagada.");
                                  facturasStore.loadData(req.conn.responseXML);
                                }
                              })
                            },
                            params: {
                              reciboId: record.data.id,
                            }
                         });
                    }
              }
        })
    }
  }
      //baseParams: {limit:pageSize}
    });
   
    var columnTree;
    <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>
      var facturasGrid = new xg.GridPanel({
          store:  facturasStore,
          columns: [
            {id:'numero', header:'Nº', sortable:true, dataIndex:'id', width:45, summaryType:'count'},
            {id:'nivel_alerta', header: "", sortable: true, dataIndex: 'nivel_alerta', renderer:nivel_alerta, width:35},
            {id:'data', header:'Data', sortable:true, dataIndex:'data', width:90, renderer: Ext.util.Format.dateRenderer('d-m-Y'), editor: { xtype: 'datefield', allowBlank: false }},
            {id:'nif', header:'NIF', sortable:true, dataIndex:'nif', width:90, editor: { xtype: 'textfield', allowBlank: true}},
            {id:'nome', header:'Nome', sortable:true, dataIndex:'nome', width:447, editor: { xtype: 'textfield', allowBlank: false }},
            {id:'total', header:'Total', sortable:true, dataIndex:'total_recibo', width:65, renderer:preco, summaryType:'sum', summaryRenderer:preco},
            {id:'desconto', header:'Desconto', sortable:true, dataIndex:'total_desconto', width:65, renderer:precoDesconto,  summaryType:'sum', summaryRenderer:preco},
            {id:'pago', header:'Pago', sortable:true, dataIndex:'total_pago', width:65, renderer:preco, summaryType:'sum', summaryRenderer:preco},
            {id:'divida', header:'Divida', sortable:true, dataIndex:'total_divida', width:65, renderer:precoDivida, summaryType:'sum', summaryRenderer:preco}
          ],
          sm: new Ext.grid.RowSelectionModel({
            singleSelect:true,
            listeners: {
              rowselect:
               function(smObj, rowIndex, record) {
                  facturaSelected = record;
               }
            }
          }),
          border: true,
          collapsible: false,
          iconCls: 'icon-grid',
          stripeRows: true,
          height    : 470,
          ddGroup   : 'consumosFacturas',
          plugins: [new Ext.ux.grid.GridSummary(),
                    new Ext.ux.grid.RowEditor({
                      saveText: 'Guardar',
                      cancelText: 'Cancelar',
                      errorSummary: false
                    })],
          listeners: {
            "render": {
              scope: this,
              fn: function(grid){
                var ddrow = new Ext.dd.DropTarget(grid.container, {
                  ddGroup: "consumosFacturas",
                  notifyDrop:
                    function(ddSource, e, data){
                      consumoId = data.node.id;
                      idFieldName = 'numero';
                      nomeFieldName = 'nome';
                      facturaId = null;
                      var trElement = e.target.parentElement.parentElement
                      for(i=0; i<trElement.childElementCount; i++){
                        if(trElement.children[i].className.match(idFieldName) != null){
                          facturaId = trElement.children[i].innerText;
                        }
                        if(trElement.children[i].className.match(nomeFieldName) != null){
                          facturaNome = trElement.children[i].innerText;
                        }
                      }
                      var changed = false;
                      if(facturaId != null) {
                        Ext.Msg.show({
                            title:'Atribuir consumo a nova factura?',
                            msg: 'Tem a certeza que deseja mover o consumo para a factura <b>Nº'+facturaId+'</b> em nome de <b>'+facturaNome+'</b>?',
                            buttons: Ext.Msg.YESNOCANCEL,
                            fn: function(btn){
                                  if(btn == 'yes'){
                                    Ext.MessageBox.show({
                                        msg: 'A Mover o Consumo',
                                        progressText: 'Movendo...',
                                        width:300,
                                        wait:true,
                                        waitConfig: {interval:200},
                                        icon:'/images/drink.png'
                                    });
                                    Ext.Ajax.request({
                                        url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/muda_consumo_de_factura.xml',
                                        success: function(){
                                          req = Ext.Ajax.request({
                                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_recibos.xml',
                                            success: function(){
                                              changed = true;
                                              Ext.MessageBox.hide();
                                              Ext.Msg.alert("Operação Concluída","Consumo agora afecto à factura <b>Nº"+facturaId+"</b> em nome de <b>"+facturaNome+"</b>");
                                              facturasStore.loadData(req.conn.responseXML);
                                              columnTree.getLoader().load(columnTree.getRootNode(), function(){columnTree.expandAll();});
                                            }
                                          })
                                        },
                                        failure: function(){
                                          Ext.MessageBox.hide();
                                          Ext.Msg.alert("Erro","O Consumo não mudou de factura. Continua afecto à factura original.");
                                        },
                                        params: {
                                          facturaId: facturaId,
                                          consumoId: consumoId,
                                        }
                                     });
                                  }
                            },
                            animEl: 'elId',
                            icon: Ext.MessageBox.QUESTION
                         });
                        return changed;
                      }
                      else
                        return false;
                    }
                })
              }
            }
          },
          tbar: new Ext.Toolbar({
            items:[
              searchFieldFacturas = new Ext.ux.form.SearchField({
                store: facturasStore,
                emptyText:'Nome',
                width:200,
                listeners: {
                  change: function(t, r, i){
                    queryFacturas = t.getValue();
                  }
                }
              }),
              new Ext.Toolbar.Separator(),
              new Ext.Toolbar.Button({
                text: "Nova Factura",
                icon: "/images/add.png",
                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                handler: function(){
                    var f = new facturaFull({
                    });
                    facturasGrid.plugins[1].stopEditing();
                    facturasGrid.store.insert(0, f);
                    facturasGrid.getView().refresh();
                    facturasGrid.getSelectionModel().selectRow(0);
                    facturasGrid.plugins[1].startEditing(0);
                }
              }),
              new Ext.Toolbar.Button({
                text: "Apagar Factura",
                icon: "/images/delete.png",
                disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                handler: function(){
                  facturasGrid.plugins[1].stopEditing();
                  var s = facturasGrid.getSelectionModel().getSelections();
                  for(var i = 0, r; r = s[i]; i++){
                      facturasGrid.store.remove(r);
                  }
                 }
              }),
              new Ext.Toolbar.Separator(),
              {
                text: "Exportar",
                icon: "/images/page_go.png",
                listeners :
                {
                  click: function() {
                    window.location="/<%=@entidade.sigla%>/<%=@event.codigo%>/recibos/detalhe/"+facturaSelected.data.id+".pdf"
                  }
                }
              },
              {
                text: "Exportar Lista",
                icon: "/images/table_go.png",
                listeners :
                {
                  click: function() {
                    window.location="/<%=@entidade.sigla%>/<%=@event.codigo%>/admin/report_facturas.pdf"
                  }
                }
              },
              new Ext.Toolbar.Separator(),
              {
                text: "Consumos",
                icon: "/images/drink.png",
                listeners :
                {
                  click: function() {
                      if(!consumosTreeWin){
                        consumosTreeWin = new Ext.Window({
                            title    : 'Consumos',
                            closable : true,
                            width    : 600,
                            height   : 250,
                            autoHeight   : true,
                            //border : false,
                            closeAction: 'hide',
                            plain    : true,
                            //layout   : 'content',
                            autoScroll: true,
                            items    : [
                              new Ext.Panel({
                                layout: 'fit',
                                items: [
                                  columnTree = new Ext.ux.tree.ColumnTree({
                                    width: '100%',
                                    height: 245,
                                    rootVisible: false,
                                    autoScroll: true,
                                    border:true,
                                    animate:true,
                                    trackMouseOver: false,
                                    enableDrag: true,
                                    ddGroup: "consumosFacturas",
                                    columns:[
                                      {id:'produto',header:'Produto', width:455, dataIndex:'produto'},
                                      {id:'preco',header:'Preço', width:90, dataIndex:'preco', renderer:preco}
                                    ],
                                    loader: new Ext.tree.TreeLoader({
                                      dataUrl: "/<%=@entidade.sigla%>/<%=@event.codigo%>/consumos/consumos_recibo/"+facturaSelected.data.id+".js",
                                      uiProviders:{
                                        'col':Ext.ux.tree.ColumnNodeUI
                                      }
                                    }),
                                    root: new Ext.tree.AsyncTreeNode({
                                      text:'Consumos'
                                    })
                                  })                          
                                ]
                              })
                            ],
                            listeners: {
                                hide: function(){consumosTreeWin = null;}
                            }
                        });
                      }
                      columnTree.expandAll();
                      consumosTreeWin.show();
                  }
                }
              },
              new Ext.Toolbar.Button({
                text: "Pagamentos",
                icon: "/images/money.png",
                handler: function(){
                  var factSelectedElement = facturaSelected;
                  factSelectedElementId = factSelectedElement.data.id;
                  if(!pagamentosWin){
                    pagamentosWin = new Ext.Window({
                        title    : 'Pagamentos',
                        closable : true,
                        width    : 550,
                        height   : 'auto',
                        closeAction: 'hide',
                        plain    : true,
                        autoScroll: true,
                        listeners: {
                          hide: function(){pagamentosWin = null;}
                        },
                        items    : [
                          pagamentosGrid = new xg.GridPanel({
                            store: new Ext.data.Store({
                                        url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/pagamentos_recibo/'+factSelectedElementId+'.xml',
                                        sortInfo:{field: 'data', direction: "ASC"},
                                        reader: new Ext.data.XmlReader({
                                                    record: "pagamento",
                                                    id: "id"
                                                }, pagamento),
                                        remote: true,
                                        autoLoad: true,
                                        listeners: {
                                            update: function(store, record, op){
                                               Ext.Msg.show({
                                                title:'Enviar Email?',
                                                msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                                                buttons: Ext.Msg.YESNOCANCEL,
                                                fn: function(btn){
                                                      sendEmail = 0;
                                                      if(btn == 'yes'){
                                                        sendEmail = 1
                                                      }
                                                      if(btn != 'cancel'){
                                                        Ext.MessageBox.show({
                                                            msg: 'A Registar o Pagamento',
                                                            progressText: 'Registando...',
                                                            width:300,
                                                            wait:true,
                                                            waitConfig: {interval:200},
                                                        });
                                                        Ext.Ajax.request({
                                                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/regista_ou_actualiza_pagamento/',
                                                          success: function(){
                                                            Ext.MessageBox.hide();
                                                            Ext.Msg.alert("Operação Concluída","Pagamento registado com sucesso");
                                                            pagamentosGrid.store.load();
                                                            facturasGrid.store.load();
                                                          },
                                                          failure: function(){
                                                            Ext.MessageBox.hide();
                                                            Ext.Msg.alert("Erro","Pagamento não registado");
                                                            pagamentosGrid.store.load();
                                                            facturasGrid.store.load();
                                                          },
                                                          params: {
                                                            pagamentoId: record.data.id,
                                                            pagamentoData: record.data.data,
                                                            pagamentoValor: record.data.valor,
                                                            pagamentoObs: record.data.observacoes,
                                                            pagamentoRecibo: factSelectedElementId,
                                                            pagamentoTipo: record.data.tipo_pagamento_nome_curto,
                                                            sendEmail: sendEmail
                                                          }
                                                       });
                                                      }
                                                    },
                                                animEl: 'elId',
                                                icon: Ext.MessageBox.QUESTION
                                             });
                                            },
                                            remove: function(store, record, op){
                                              Ext.Msg.show({
                                                title:'Enviar Email?',
                                                msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                                                buttons: Ext.Msg.YESNOCANCEL,
                                                fn: function(btn){
                                                      sendEmail = 0;
                                                      if(btn == 'yes'){
                                                        sendEmail = 1
                                                      }
                                                      if(btn != 'cancel'){
                                                        Ext.MessageBox.show({
                                                            msg: 'A Eliminar o Pagamento',
                                                            progressText: 'Eliminando...',
                                                            width:300,
                                                            wait:true,
                                                            waitConfig: {interval:200},
                                                        });
                                                        Ext.Ajax.request({
                                                              url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_pagamento/'+record.data.id,
                                                              success: function(){
                                                                Ext.MessageBox.hide();
                                                                Ext.Msg.alert("Operação Concluída","Pagamento eliminado com sucesso");
                                                                pagamentosGrid.store.load();
                                                                facturasGrid.store.load();
                                                              },
                                                              failure: function(){
                                                                Ext.MessageBox.hide();
                                                                Ext.Msg.alert("Erro","Pagamento não eliminado");
                                                                pagamentosGrid.store.load();
                                                                facturasGrid.store.load();
                                                              },
                                                              params: {
                                                                sendEmail: sendEmail
                                                              }
                                                           });
                                                        }
                                                },
                                                animEl: 'elId',
                                                icon: Ext.MessageBox.QUESTION
                                              });
                                            }
                                      }
                                    }),
                            sm: new Ext.grid.RowSelectionModel({
                              singleSelect:true,
                              listeners: {
                                rowselect:
                                 function(smObj, rowIndex, record) {
                                    pagamentoSelected = record;
                                 }
                              }
                            }),
                            frame: true,
                            width: "100%",
                            height   : 'auto',
                            iconCls: 'icon-grid',
                            stripeRows: true,
                            autoHeight: true,
                            plugins: [new Ext.ux.grid.GridSummary(),
                                      new Ext.ux.grid.RowEditor({
                                        saveText: 'Guardar',
                                        cancelText: 'Cancelar',
                                        errorSummary: false
                                      })
                            ],
                            columns: [
                              new xg.RowNumberer(),
                              {id:'data_pagamento', header: "Data", sortable: true, dataIndex: 'data', width:100, renderer: Ext.util.Format.dateRenderer('d-m-Y'), editor: { xtype: 'datefield', allowBlank: false, maxValue: (new Date()).format('m/d/Y') }},
                              {id:'tipo_pagamento', header: "Meio Pg", sortable: true, dataIndex: 'tipo_pagamento_nome_curto', width:100, editor:
                                new Ext.form.ComboBox({
                                  store: new Ext.data.Store({
                                  // load using HTTP
                                  url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/pagamentos/tipos_pagamento.xml',
                                  autoLoad: true,
                                  // the return will be XML, so lets set up a reader
                                  reader: new Ext.data.XmlReader({
                                         record: 'tipo_pagamento',
                                         id: 'id',
                                         totalRecords: '@total'
                                     }, [
                                         'id', 'nome', 'nome_curto'
                                     ])
                                  }),
                                  valueField: 'id',
                                  displayField: 'nome_curto',
                                  typeAhead: true,
                                  mode: 'remote',
                                  forceSelection: true,
                                  triggerAction: 'all',
                                  emptyText:'Escolha...'
                                })
                              },
                              {id:'observacoes', header: "Observações", sortable: true, dataIndex: 'observacoes', width:230, editor: { xtype: 'textfield', allowBlank: false }},
                              {id:'valor_pagamento', header: "Montante", sortable: true, dataIndex: 'valor', renderer:preco, width:60, summaryType:'sum', summaryRenderer:preco, editor: {xtype: 'numberfield', allowBlank: false, minValue: 1 }},
                            ],
                            tbar: new Ext.Toolbar({
                              items: [
                                new Ext.Toolbar.Button({
                                  text: "Novo Pagamento",
                                  icon: "/images/add.png",
                                  disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                  handler: function(){
                                      var p = new pagamento({
                                          data: new Date(),
                                          observacoes: '',
                                          valor: 0
                                      });
                                      pagamentosGrid.plugins[1].stopEditing();
                                      pagamentosGrid.store.insert(0, p);
                                      pagamentosGrid.getView().refresh();
                                      pagamentosGrid.getSelectionModel().selectRow(0);
                                      pagamentosGrid.plugins[1].startEditing(0);
                                  }
                                }),
                                new Ext.Toolbar.Button({
                                  text: "Apagar",
                                  disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
                                  icon: "/images/delete.png",
                                  handler: function(){
                                    pagamentosGrid.plugins[1].stopEditing();
                                    var s = pagamentosGrid.getSelectionModel().getSelections();
                                    for(var i = 0, r; r = s[i]; i++){
                                        pagamentosGrid.store.remove(r);
                                    }
                                   }
                                })
                              ]
                            }),
                            listeners: {
                              resize: function(el) {
                                      if (el.getInnerHeight() < 200) {
                                          el.autoHeight = false;
                                          el.setHeight(200);
                                      }
                                  }
                            }
                          })
                        ]
                    });
                  }
                  pagamentosWin.show();
                }
              })
            ]
          })
      });
     <% end %> 
     
     var searchInscricoesDS = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/search_inscricoes.xml',
        }),
        reader: myReader
     });

    // Custom rendering Template
    var inscricoesResultTpl = new Ext.XTemplate(
        '<tpl for="."><div style="padding:5px 5px 5px 5px;" class="search-item">',
            '<div style="padding:5px 5px 2px 5px;"><b><span><font size="2"><span>{<%= nome_field_name %>} - {idadeCalculated} anos</font></b></span></div><div style="padding:2px 5px 5px 5px;"><font size="-2">Inscrito em {created_at:date("j M Y")} por {user}</font></div>',
        '</div></tpl>'
    );
    
    var reservaTpl = new Ext.XTemplate(
        '<tpl for="."><div style="padding:5px 5px 5px 5px;" class="search-item">',
          '<span style="float:left; padding-top:5px;"><img src="/images/{reserva_tipo_reserva_icon}"></span>',
          '<span style="float:right; border-left: 1px solid #ddd; margin-right:-5px; margin-top:-5px; padding:5px 5px 5px 5px; height:100%; width:180px; text-align:right; background-color:{reserva_estadoactual_backcolor}"><img src="/images/{reserva_estadoactual_icon}"><br/><font size="-2">{reserva_estadoactual_descricao}</font></span>',
          '<div style="padding:5px 5px 2px 5px; margin-left: 16px;"><font size="2"><b>{reserva_nome} {reserva_ementa}</b></font></div>',
          '<div style="padding:2px 5px 2px 5px; margin-left: 16px;"><font size="-2"><b>Tipo:</b> {reserva_tipo_reserva_nome} | <b>A consumir em:</b> {reserva_data_consumo:date("j M Y")} | <b>Estado:</b> {reserva_estadoactual_nome} <b>desde</b> {reserva_estadoactual_data_inicio}</font></div>',
            //'<div style="padding:5px 5px 1px 5px;"><span><b><font size="2">{reserva_nome} {reserva_ementa}</font></b></span></div><div style="padding:1px 5px 2px 5px; color:light-gray"><span><font size="1">Estado: {reserva_estadoactual_descricao} desde {reserva_estadoactual_data_inicio:date(j m Y)}</font></span></div><div style="padding:2px 5px 5px 5px;"><font size="-2">Tipo: {reserva_tipo_reserva_nome} | A consumir em: {reserva_data_consumo:date(j m Y)} </font></div>',
        '</div></tpl>'
    );
    
    
    var controloReservaTpl = new Ext.XTemplate(
        '<tpl for="."><div style="padding:15px 5px 15px 5px;" class="controlo-item">',
          '<span style="float:left; padding-top:5px;"><img src="/images/{reserva_tipo_reserva_icon}"></span>',
          '<span style="float:right; border-left: 1px solid #ddd; margin-right:-5px; margin-top:-15px; margin-bottom:-25px; padding:5px 5px 5px 5px; height:120%; width:180px; text-align:right; background-color:{reserva_estadoactual_backcolor}"><img src="/images/{reserva_estadoactual_icon}"><br/><br/><font size="-2">{reserva_estadoactual_descricao}</font></span>',
          '<div style="padding:5px 5px 2px 5px; margin-left: 16px;"><font size="2"><b>{reserva_nome}</b></font></div>',
          '<div style="padding:5px 5px 2px 5px; margin-left: 16px; margin-right:195px; text-align:right;"><font size="+3"><b>{reserva_ementa}</b></font></div>',
          '<tpl if="reserva_aviso != undefined && reserva_aviso != \'\'">',
            '<div style="padding:5px 5px 2px 5px; margin-left: 16px;"><font size="1"><img src="/images/exclamation.png" /><i> {reserva_aviso}</i></font></div>',
          '</tpl>',
          '<div style="padding:2px 5px 2px 5px; margin-left: 16px;"><font size="-2"><b>Tipo:</b> {reserva_tipo_reserva_nome} | <b>A consumir em:</b> {reserva_data_consumo:date("j M Y")} | <b>Estado:</b> {reserva_estadoactual_nome} <b>desde</b> {reserva_estadoactual_data_inicio}</font></div>',
        '</div></tpl>'
    );
    
     var reservasReader = new Ext.data.XmlReader({
        record: "reserva",     // The repeated element which contains row information
        id: "id",              // The element within the row that provides an ID for the record (optional)
        totalRecords: "totalCount"
     }, reserva);
   
   
    var reservasStore = new Ext.data.GroupingStore({
      url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml',
      reader: reservasReader,
      //remoteSort: true,
      remote: true,
      totalProperty: "totalCount",
      autoLoad: false,
      sortInfo: {
          field: 'id',
          direction: 'ASC' // or 'DESC' (case sensitive for local sorting),
      },
      listeners: {
        exception:
          function(dataProxy,type,action,options,response,arg) {
              alert("exception");
          },
        update:
          function(store, record, op){
              Ext.MessageBox.show({
                  msg: 'A Registar a Reserva',
                  progressText: 'Registando...',
                  width:300,
                  wait:true,
                  waitConfig: {interval:200},
              });
              Ext.Ajax.request({
                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/create_or_update_reserva.xml',
                success: function(){
                  req = Ext.Ajax.request({
                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml',
                    success: function(){
                      Ext.MessageBox.hide();
                      Ext.Msg.alert("Operação Concluída","Reserva registada com sucesso");
                      reservasStore.loadData(req.conn.responseXML);
                    }
                  })
                },
                failure: function(){
                  req = Ext.Ajax.request({
                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml',
                    success: function(){
                      Ext.MessageBox.hide();
                      Ext.Msg.alert("Operação Não Concluída","Reserva não registada.");
                      reservasStore.loadData(req.conn.responseXML);
                    }
                  })
                },
                params: {
                  reservaId: record.data.id,
                  reservaInscricaoId: record.data.inscricao_id,
                  reservaReservaId: record.data.reserva_id
                }
              });
        },
        remove: function(store, record, op){
          Ext.Msg.show({
              title:'Confirmar Operação',
              msg: '<b>Tem a certeza que deseja eliminar esta reserva?</b>',
              buttons: Ext.Msg.YESNO,
              fn: function(btn){
                    if(btn == 'yes'){
                      Ext.MessageBox.show({
                          msg: 'A Eliminar a Reserva',
                          progressText: 'Eliminando...',
                          width:300,
                          wait:true,
                          waitConfig: {interval:200},
                          icon:'/images/delete.png'
                      });
                      Ext.Ajax.request({
                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_reserva.xml',
                            success: function(){
                              req = Ext.Ajax.request({
                                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml',
                                success: function(){
                                  Ext.MessageBox.hide();
                                  Ext.Msg.alert("Operação Concluída","Reserva eliminada com sucesso");
                                  reservasStore.loadData(req.conn.responseXML);
                                }
                              })
                            },
                            failure: function(){
                              req = Ext.Ajax.request({
                                url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml',
                                success: function(){
                                  Ext.MessageBox.hide();
                                  Ext.Msg.alert("Operação Não Concluída","A Reserva não foi apagada.");
                                  reservasStore.loadData(req.conn.responseXML);
                                }
                              })
                            },
                            params: {
                              reservaId: record.data.id,
                            }
                         });
                    }
              }
        })
    }
  }
      //baseParams: {limit:pageSize}
    });
   
   
   var inscricoesSearch;
   var reservasGrid;
   var reservasInscricaoCardIdField;
   
   var gestaoReservasPanel = new Ext.Panel({
    closable:false,
    width:"100%",
    height:550,
    border:true,
    plain:false,
    frame:true,
    layout:'border',
    defaults: {
        collapsible: false,
        split: true,
    },
    items: [
      {
        title: 'Modo',
        region: 'west',
        width: 180,
        height: 440,
        frame: false,
        tbar: [{
              xtype: 'buttongroup',
              columns: 1,
              frame: false,
              height: 440,
              items: [
                  {
                      text: '<br/><br/>Resumo de Reservas',
                      scale: 'large',
                      icon     : '/images/statistics_48.png',
                      iconAlign: 'top',
                      labelAlign: 'bottom',
                      width:172,
                      height:100,
                      listeners: {
                        click : function(){
                          painel_centro = gestaoReservasPanel.get('painel_centro');
                          painel_centro.removeAll();
                          
                          gestaoReservasPanel.doLayout();
                        }
                      }
                  },{
                      text: '<br/><br/>Consulta de Reservas',
                      icon: '/images/search_48.png',
                      scale: 'large',
                      iconAlign: 'top',
                      width:"100%",
                      height:100,
                      listeners: {
                        click : function(){
                          painel_centro = gestaoReservasPanel.get('painel_centro');
                          painel_centro.removeAll();
                          painel_centro.add(consultaReservasPanel());
                          gestaoReservasPanel.doLayout();
                        }
                      }
                  },{
                      text: '<br/><br/>Controlo de Reservas',
                      icon: '/images/tick_48.png',
                      scale: 'large',
                      iconAlign: 'top',
                      width:"100%",
                      height:100,
                      listeners: {
                        click : function(){
                          painel_centro = gestaoReservasPanel.get('painel_centro');
                          painel_centro.removeAll();
                          painel_centro.add(controloReservasPanel());
                          gestaoReservasPanel.doLayout();
                        }
                      }
                  }
                  
                ]
              }]
      },
      {
        id: 'painel_centro',
        region: 'center'
      }
    ]
   })
   
   
    function consultaReservasPanel(){
      return new Ext.Panel({
        id: 'consultaReservasPanel',
        layout: 'table',
        layoutConfig: {
            columns: 1,
            rows: 3
        },
        listeners: {
          afterlayout: function(){
            //alert("afterlayout");
            reservasInscricaoCardIdField.focus(true, true);
          }
        },
        items: [
          {
            title: 'Pesquisa de Inscrição',
            width: '100%',
            layout: 'table',
            layoutConfig: {
                columns: 3,
                rows: 1
            },
            border: true,
            frame: true,
            items:[
                {
                  bodyStyle:'padding:15px',
                  items: [
                    reservasInscricaoCardIdField = new Ext.form.TextField({
                      fieldLabel: 'Cartão',
                      blankText: 'Código de Barras',
                      hideLabel: false,
                      enableKeyEvents: true,
                      listeners: {
                        keyup:
                            function(textField, event){
                              if (event.getCharCode() == event.ENTER || textField.getValue().length == 4){
                                req = Ext.Ajax.request({
                                  url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml?inscricao='+textField.getValue(),
                                  success: function() {
                                    reservasStore.loadData(req.conn.responseXML);
                                    if(reservasStore.getCount() > 0) {
                                      inscricoesSearch.setValue(reservasStore.getAt(0).data.inscricao_nome);
                                    } else {
                                      inscricoesSearch.setValue("");
                                    }
                                  }
                                });   
                              }
                            }
                        }
                      }),
                  ]
                  
                },
                {
                },
                {
                  bodyStyle:'padding:15px',
                  items:
                    inscricoesSearch = new Ext.form.ComboBox({
                      label: 'Inscrição:',
                      store: searchInscricoesDS,
                      displayField:'nome',
                      typeAhead: false,
                      loadingText: 'A Procurar...',
                      width: 570,
                      pageSize:10,
                      hideTrigger:true,
                      tpl: inscricoesResultTpl,
                      itemSelector: 'div.search-item',
                      hideLabel:false,
                      onSelect: function(record){ // override default onSelect to do redirect
                          reservasInscricaoCardIdField.setValue(record.data.id);
                          inscricoesSearch.setValue(record.data.<%= nome_field_name %>);
                          inscricoesSearch.collapse();
                          req = Ext.Ajax.request({
                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml?inscricao='+record.data.id,
                            success: function() {
                              reservasStore.loadData(req.conn.responseXML);
                            }
                          });
                      }
                  })
                }
            ]
          },
          {
            height: 10
          },
          {
            title: 'Detalhe de Reservas',
            width: '100%',
            height: 370,
            autoScroll:true,
            frame: true,
            plain: true,
            items:
                new Ext.DataView({
                  tpl: reservaTpl,
                  store: reservasStore,
                  itemSelector: 'div.search-item',
                  autoHeight:true,
                  overClass:'x-view-over',
                  emptyText: 'Sem reservas para mostrar',
                  multiSelect: true,
                  border: false
                })
            }
        ]
      })
    }
    
    
    function controloReservasPanel(){
      return new Ext.Panel({
        id: 'consultaReservasPanel',
        layout: 'table',
        layoutConfig: {
            columns: 1,
            rows: 3
        },
        listeners: {
          afterlayout: function(){
            //alert("afterlayout");
            reservasInscricaoCardIdField.focus(true, true);
          }
        },
        items: [
          {
            width: '100%',
            frame: false,
            header: false,
            items: [
              new Ext.form.FormPanel({
                width: "100%",
                labelWidth: 460,
                labelAlign: 'right',
                items: [
                  reservaControloCombo = new Ext.form.ComboBox({
                      type_ahed: false,
                      triggerAction: 'all',
                      fieldLabel: "Reserva a Controlar",
                      width: 300,
                      mode: 'remote',
                      valueField: 'ids',
                      displayField: 'nome',
                      emptyText: 'Escolha...',
                      lazyRender:true,
                      store: new Ext.data.XmlStore({
                          autoDestroy: true,
                          storeId: 'tipoReservasStore',
                          record: 'tipo_reserva',
                          totalRecords: '@totalCount',
                          url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_tipo_reservas.xml',
                          fields: [
                              'ids', 'nome', 'icon'
                          ]
                      }),
                      listeners: {
                        select: function(){
                          reservasInscricaoCardIdField.focus(true, true);
                        }
                      }
                    }),
                  consumirReservaCheck = new Ext.form.ComboBox({
                      fieldLabel: "Consumir Reservas",
                      width: 300,
                      lazyRender:false,
                      emptyText: 'Escolha...',
                      mode: 'local',
                      store: new Ext.data.ArrayStore({
                          id: 0,
                          fields: [
                              'id',
                              'displayText'
                          ],
                          data: [[1, 'Sim'], [2, 'Não']]
                      }),
                      valueField: 'id',
                      displayField: 'displayText',
                      listeners: {
                        select: function(){
                          reservasInscricaoCardIdField.focus(true, true);
                        }
                      }
                    })
                ]
              })
            ]
          },
          {
            title: 'Inscrição a Controlar',
            width: '100%',
            layout: 'table',
            layoutConfig: {
                columns: 3,
                rows: 1
            },
            border: true,
            frame: true,
            items:[
                {
                  bodyStyle:'padding:15px',
                  items: 
                    reservasInscricaoCardIdField = new Ext.form.TextField({
                      fieldLabel: 'Cartão',
                      blankText: 'Código de Barras',
                      hideLabel: false,
                      enableKeyEvents: true,
                      listeners: {
                        keyup:
                            function(textField, event){
                              if (event.getCharCode() == event.ENTER || textField.getValue().length == 4){
                                req = Ext.Ajax.request({
                                  url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml?inscricao='+textField.getValue()+'&reserva_ids='+reservaControloCombo.getValue()+'&consumir_reserva='+consumirReservaCheck.getValue(),
                                  success: function() {
                                    reservasInscricaoCardIdField.focus(true, true);
                                    reservasStore.loadData(req.conn.responseXML);
                                    if(reservasStore.getCount() > 0) {
                                      inscricoesSearch.setValue(reservasStore.getAt(0).data.inscricao_nome);
                                    } else {
                                      inscricoesSearch.setValue("");
                                    }
                                  },
                                  failure: function(){
                                    inscricoesSearch.setValue("");
                                    reservasInscricaoCardIdField.focus(true, true);
                                  }
                                });   
                              }
                            }
                        }
                      })
                },
                {
                },
                {
                  bodyStyle:'padding:15px',
                  items:
                    inscricoesSearch = new Ext.form.ComboBox({
                      label: 'Inscrição:',
                      store: searchInscricoesDS,
                      displayField:'nome',
                      typeAhead: false,
                      loadingText: 'A Procurar...',
                      width: 570,
                      pageSize:10,
                      hideTrigger:true,
                      tpl: inscricoesResultTpl,
                      itemSelector: 'div.search-item',
                      hideLabel:false,
                      onSelect: function(record){ 
                          reservasInscricaoCardIdField.setValue(record.data.id);
                          inscricoesSearch.setValue(record.data.<%= nome_field_name %>);
                          inscricoesSearch.collapse();
                          req = Ext.Ajax.request({
                            url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/lista_reservas.xml?inscricao='+textField.getValue()+'&reserva_ids='+reservaControloCombo.getValue()+'&consumir_reserva='+consumirReservaCheck.getValue(),
                            success: function() {
                              reservasInscricaoCardIdField.focus(true, true);
                              reservasStore.loadData(req.conn.responseXML);
                            },
                            failure: function(){
                              reservasInscricaoCardIdField.focus(true, true);
                            }
                          });
                      }
                  })
                }
            ]
          },
          {
            height: 13
          },
          {
            title: 'Detalhe de Reservas',
            width: '100%',
            height: 180,
            autoScroll:true,
            frame: true,
            plain: true,
            items:
                new Ext.DataView({
                  tpl: controloReservaTpl,
                  store: reservasStore,
                  itemSelector: 'div.controlo-item',
                  autoHeight:true,
                  overClass:'x-view-over',
                  emptyText: 'Sem reservas para mostrar',
                  multiSelect: true,
                  border: false
                })
            },
            {
              height: 12
            },
            {
              title: 'Contador de Reservas Consumidas',
              frame: true,
              plain: true,
              height: 126
            }
        ]
      })
    }
    
    
    
    
    var allPagamentosGrid
    allPagamentosGrid = new xg.GridPanel({
      store: new Ext.data.Store({
                  url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/pagamentos/lista.xml',
                  sortInfo:{field: 'data', direction: "ASC"},
                  reader: new Ext.data.XmlReader({
                              record: "pagamento",
                              id: "id"
                          }, pagamento),
                  remote: true,
                  autoLoad: true,
                  listeners: {
                      update: function(store, record, op){
                         Ext.Msg.show({
                          title:'Enviar Email?',
                          msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                          buttons: Ext.Msg.YESNOCANCEL,
                          fn: function(btn){
                                sendEmail = 0;
                                if(btn == 'yes'){
                                  sendEmail = 1
                                }
                                if(btn != 'cancel'){
                                  Ext.MessageBox.show({
                                      msg: 'A Registar o Pagamento',
                                      progressText: 'Registando...',
                                      width:300,
                                      wait:true,
                                      waitConfig: {interval:200},
                                  });
                                  Ext.Ajax.request({
                                    url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/regista_ou_actualiza_pagamento/',
                                    success: function(){
                                      Ext.MessageBox.hide();
                                      Ext.Msg.alert("Operação Concluída","Pagamento registado com sucesso");
                                      allPagamentosGrid.store.load();
                                      //facturasGrid.store.load();
                                    },
                                    failure: function(){
                                      Ext.MessageBox.hide();
                                      Ext.Msg.alert("Erro","Pagamento não registado");
                                      allPagamentosGrid.store.load();
                                      //facturasGrid.store.load();
                                    },
                                    params: {
                                      pagamentoId: record.data.id,
                                      pagamentoData: record.data.data,
                                      pagamentoValor: record.data.valor,
                                      pagamentoObs: record.data.observacoes,
                                      pagamentoRecibo: record.data.factura_nome,
                                      pagamentoTipo: record.data.tipo_pagamento_nome_curto,
                                      sendEmail: sendEmail
                                    }
                                 });
                                }
                              },
                          animEl: 'elId',
                          icon: Ext.MessageBox.QUESTION
                       });
                      },
                      remove: function(store, record, op){
                        Ext.Msg.show({
                          title:'Enviar Email?',
                          msg: '<b>Deseja que seja enviado um e-mail para o responsável pela factura para que ele tome conhecimento desta alteração?</b>',
                          buttons: Ext.Msg.YESNOCANCEL,
                          fn: function(btn){
                                sendEmail = 0;
                                if(btn == 'yes'){
                                  sendEmail = 1
                                }
                                if(btn != 'cancel'){
                                  Ext.MessageBox.show({
                                      msg: 'A Eliminar o Pagamento',
                                      progressText: 'Eliminando...',
                                      width:300,
                                      wait:true,
                                      waitConfig: {interval:200},
                                  });
                                  Ext.Ajax.request({
                                        url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/admin/elimina_pagamento/'+record.data.id,
                                        success: function(){
                                          Ext.MessageBox.hide();
                                          Ext.Msg.alert("Operação Concluída","Pagamento eliminado com sucesso");
                                          allPagamentosGrid.store.load();
                                          //facturasGrid.store.load();
                                        },
                                        failure: function(){
                                          Ext.MessageBox.hide();
                                          Ext.Msg.alert("Erro","Pagamento não eliminado");
                                          allPagamentosGrid.store.load();
                                          //facturasGrid.store.load();
                                        },
                                        params: {
                                          sendEmail: sendEmail
                                        }
                                     });
                                  }
                          },
                          animEl: 'elId',
                          icon: Ext.MessageBox.QUESTION
                        });
                      }
                }
              }),
      sm: new Ext.grid.RowSelectionModel({
        singleSelect:true,
        listeners: {
          rowselect:
           function(smObj, rowIndex, record) {
              pagamentoSelected = record;
           }
        }
      }),
      border: true,
      collapsible: false,
      iconCls: 'icon-grid',
      stripeRows: true,
      height    : 470,
      plugins: [new Ext.ux.grid.GridSummary(),
                new Ext.ux.grid.RowEditor({
                  saveText: 'Guardar',
                  cancelText: 'Cancelar',
                  errorSummary: false
                })
      ],
      columns: [
        new xg.RowNumberer(),
        {id:'data_pagamento', header: "Data", sortable: true, dataIndex: 'data', width:100, renderer: Ext.util.Format.dateRenderer('d-m-Y'), editor: { xtype: 'datefield', allowBlank: false, maxValue: (new Date()).format('m/d/Y') }},
        {id:'factura', header: "Factura", sortable: true, dataIndex: 'factura_nome', width:310,
          editor: new Ext.form.ComboBox({
            store: facturasStore,
            valueField: 'id',
            displayField: 'nome',
            typeAhead: true,
            mode: 'local',
            forceSelection: true,
            triggerAction: 'all',
            emptyText:'Escolha...'
          })
        },
        {id:'tipo_pagamento', header: "Meio Pagamento", sortable: true, dataIndex: 'tipo_pagamento_nome_curto', width:120,
          editor: new Ext.form.ComboBox({
            store: new Ext.data.Store({
              // load using HTTP
              url: '/<%= @entidade.sigla %>/<%= @event.codigo %>/pagamentos/tipos_pagamento.xml',
              autoLoad: true,
              // the return will be XML, so lets set up a reader
              reader: new Ext.data.XmlReader({
                     record: 'tipo_pagamento',
                     id: 'id',
                     totalRecords: '@totalCount'
                 }, tipoPagamento)
              }),
            valueField: 'id',
            displayField: 'nome_curto',
            typeAhead: true,
            mode: 'remote',
            forceSelection: true,
            triggerAction: 'all',
            emptyText:'Escolha...'
          })
        },
        {id:'observacoes', header: "Observações", sortable: true, dataIndex: 'observacoes', width:310, editor: { xtype: 'textfield', allowBlank: false }},
        {id:'valor_pagamento', header: "Montante", sortable: true, dataIndex: 'valor', renderer:preco, width:100, summaryType:'sum', summaryRenderer:preco, editor: {xtype: 'numberfield', allowBlank: false, minValue: 1 }},
      ],
      tbar: new Ext.Toolbar({
        items: [
          new Ext.Toolbar.Button({
            text: "Novo Pagamento",
            icon: "/images/add.png",
            disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
            handler: function(){
                var p = new pagamento({
                    data: new Date(),
                    observacoes: '',
                    valor: 0
                });
                allPagamentosGrid.plugins[1].stopEditing();
                allPagamentosGrid.store.insert(0, p);
                allPagamentosGrid.getView().refresh();
                allPagamentosGrid.getSelectionModel().selectRow(0);
                allPagamentosGrid.plugins[1].startEditing(0);
            }
          }),
          new Ext.Toolbar.Button({
            text: "Apagar",
            disabled: <%= !(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>,
            icon: "/images/delete.png",
            handler: function(){
              pagamentosGrid.plugins[1].stopEditing();
              var s = allPagamentosGrid.getSelectionModel().getSelections();
              for(var i = 0, r; r = s[i]; i++){
                  allPagamentosGrid.store.remove(r);
              }
             }
          }),
          new Ext.Toolbar.Separator(),
          new Ext.Toolbar.Button({
              text: 'Exportar',
              icon: '/images/table_go.png',
              menu:
                new Ext.menu.Menu({
                //id: 'menuEdicao',
                style: {
                    overflow: 'visible'     // For the Combo popup
                },
                items: [
                     {
                       text: "Totais Semanais por Meio de Pagamento",
                       icon: "/images/table_multiple.png",
                       listeners:
                       {
                         click: function() {
                           window.location = "/<%= @entidade.sigla %>/<%= @event.codigo %>/pagamentos/report_totais_por_semana.pdf";
                         }
                       }
                     }
                 ]
             })
          })
        ]
      })
    })
    
    
    
    
   
     var tabs = new Ext.TabPanel({
        region: 'center',
        activeTab: 0,
        items: [{
            title: 'Inscrições',
            height   : 550,
            items: grid
        }
        <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>
        ,{
            title: 'Facturas',
            height   : 550,
            items: facturasGrid
        },
        {
            title: 'Pagamentos',
            heigth: 550,
            items: allPagamentosGrid
        }
        <% end %>
        <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_LEITURA" || @current_user.profile == "EVENTO_ESCRITA") && @current_user.evento_id == @event.id))) %>
        ,{
            title: 'Reservas',
            height   : 550,
            items:  gestaoReservasPanel
        }
        <% end %>
        ]
    });
     
    var outerPanel = new Ext.Panel({
        title: '<%= @event.nome %> - Administração de Inscrições',
        closable:false,
        width:"100%",
        height:555,
        border:true,
        plain:false,
        frame:true,
        layout: 'border',
        items: [tabs]
    });

    //win.show(this); 
     
    // FORM DE EDIÇÃO
    var fs_edit = new Ext.FormPanel({
      frame: true,
      region: 'center',
      margins: '10 10 10 10',
      width:"100%",
      labelAlign: 'right',
      labelWidth: 160,
      autoHeight: true,
      
        buttons: [
          new Ext.Button({
            text     : 'Cancelar',
            icon     : '/images/cancel.png',
            handler  : function(){
                editWin.hide();
            }
          }),
          new Ext.Button({
            text:"Modificar",
            icon:"/images/pencil.png",
            handler: function(){
                fs_edit.getForm().submit({
                  url:'/<%= @entidade.sigla %>/<%= @event.codigo %>/inscricoes/regista/'+ inscricaoSelected.data.id,
                  waitMsg:'A Registar Modifcações...',
                  reset: true,
                  success:function(){
                    myStore.load({
                      params: {
                          start:currentPage*pageSize,
                          limit:pageSize,
                          query:query,
                          sort: sort,
                          dir : dir
                      }});
                    editWin.hide();
                  }
                });
            }
          })
        ],
        
        // reusable eror reader class defined at the end of this file
        errorReader: new Ext.form.XmlErrorReader(),

        items: [
          new Ext.TabPanel({
            frame: true,
            width:"100%",
            margins: '10 10 10 10',
            activeTab: 0,
            waitMsgTarget: true,
            border:false,
            anchor:'100% 100%',
            deferredRender:true,
            autoHeight: true,
            resizeTabs: true,
            tabWidth:200,
            minTabWidth: 100,
            enableTabScroll: true,
            defaults: {autoScroll:true},
            items: [
              <% numero_grupo = @event.grupo_camposs.length %>
              <% grupos_campos = EventosGruposCampos.find_all_by_evento_id(@event.id, :order=>"`eventos_grupos_campos`.order") %>
              <% grupos_campos.each do |evento_grupo| %>
                <% grupo = evento_grupo.grupo_campos %>
                <% numero_grupo = numero_grupo-1 %>
                new Ext.form.FieldSet({
                    frame: true,
                    region: 'center',
                    title:'<%= grupo.label %>',
                    margins: '10 10 10 10',
                    width:"100%",
                    labelAlign: 'right',
                    labelWidth: 160,
                    defaultType: 'textfield',
                    autoHeight: true,
                    headerAsText: false,
                    items: [
                      <% numero = grupo.campos.length %>
                      <% campos = Campo.find_all_by_grupo_campos_id(grupo.id, :order=>"`campos`.order") %>
                      <% campos.each do |campo| %>
                        <% numero = numero-1 %>
                        
                          <% if (campo.tipo.upcase == "LOV") %>
                                new Ext.Panel({ layout: 'column', items: [
                                  new Ext.Panel({ layout: 'form', items: [
                                    combo = new Ext.form.ComboBox({
                                      fieldLabel: '<%= campo.label %>',
                                      name: 'campo[<%= campo.id %>]',
                                      id: '<%= campo.nome%>_value',
                                      hiddenName: 'campo[<%= campo.id %>]',
                                      store: new Ext.data.Store({
                                          // load using HTTP
                                          url: '/<%= @entidade.sigla %>/listavalores/valores/<%=campo.id%>.xml',
                                          autoLoad: true,
                                          // the return will be XML, so lets set up a reader
                                          reader: new Ext.data.XmlReader({
                                                 record: 'val',
                                                 id: 'id',
                                                 totalRecords: '@total'
                                             }, [
                                                 '<%= campo.lista_valores.value_field %>', '<%= campo.lista_valores.text_field %>'
                                             ])
                                        }),
                                        valueField: '<%= campo.lista_valores.value_field %>',
                                        displayField:'<%= campo.lista_valores.text_field %>',
                                        typeAhead: true,
                                        mode: 'remote',
                                        forceSelection: true,
                                        triggerAction: 'all',
                                        emptyText:'Escolha...',
                                        selectOnFocus:true,
                                        width: 250,
                                        allowBlank: <%= !campo.required || !campo.mostra_update%>,
                                        blankText: "Este campo é obrigatório",
                                        msgTarget: "under",
                                        hidden: <%= !campo.mostra_update %>,
                                        hideLabel: <%= !campo.mostra_update %>
                                    })
                                  ]})
                                    <% if(campo.lista_valores.editavel && campo.mostra_update) %>
                                    ,
                                    new Ext.Button({
                                      text: 'Não Encontra...',
                                      icon: '/images/add.png',
                                      tooltip: 'ADICIONAR <%= campo.label.upcase %>',
                                      handler: function() {
                                         if(!igrejaWin){
                                            igrejaWin= new Ext.Window({
                                                layout      : 'fit',
                                                width       : 400,
                                                height      : 300,
                                                closeAction :'hide',
                                                plain       : true,
                                                
                                                items: [
                                                  
                                                   form = new Ext.FormPanel({
                                                      frame: true,
                                                      title:'Adicionar Nova <%= campo.label %>',
                                                      labelAlign: 'right',
                                                      labelWidth: 120,
                                                      width:"75%",
                                                      waitMsgTarget: true,
                                                      defaultType: 'textfield',
                                                      errorReader: new Ext.form.XmlErrorReader(),
                                                      items: [
                                                        <% columns = eval(campo.lista_valores.class_name+".columns") %>
                                                        <% inner_numero = columns.length %>
                                                        <% columns.each do |column| %>
                                                          <% inner_numero = inner_numero-1 %>
                                                          <% if ((column.name.upcase != "ID") && (column.name.upcase != "CREATED_AT") && (column.name.upcase != "UPDATED_AT") && (column.name.upcase != "FULL_NAME")) %>
                                                            {
                                                                fieldLabel: '<%= column.name.sub("_"," ").upcase %>',
                                                                name: 'campo[<%= column.name %>]',
                                                                width:"80%"
                                                            }
                                                            <% if inner_numero != 0 %>
                                                              ,
                                                            <% end %>
                                                          <% end %>
                                                        <% end %>
                                                      ]
                                                   })
                                                ],
                                                
                                                buttons: [{
                                                    text     : 'Adicionar',
                                                    icon     : '/images/add.png',
                                                    disabled : false,
                                                    handler  : function(){
                                                        form.getForm().submit({
                                                            url: '/<%= @entidade.sigla %>/listavalores/regista_valor/<%= campo.id %>',
                                                            waitMsg:'A Registar <%= campo.label %>...',
                                                            reset: true,
                                                            success:function(){
                                                              igrejaWin.hide();
                                                              combo.getStore().reload();
                                                              Ext.MessageBox.show({
                                                                  title: '<%= campo.label %> Registada',
                                                                  msg: '<%= campo.label %> foi correctamente registada. Pode escolher o novo valor na caixa de selecção',
                                                                  width: 350,
                                                                  buttons: Ext.MessageBox.OK,
                                                                  icon: Ext.MessageBox.INFO
                                                              });
                                                            }
                                                        });
                                                    }
                                                },{
                                                    text     : 'Cancelar',
                                                    icon     : '/images/cancel.png',
                                                    handler  : function(){
                                                        igrejaWin.hide();
                                                    }
                                                }]
                                            });
                                          }
                                        igrejaWin.show();
                                      }
                                    })
                                  <% end %>
                                ]
                              })
                          <% end %>
                          <% if(campo.tipo.upcase == "DATE") %>
                              new Ext.form.DateField({
                                fieldLabel  : '<%= campo.label %>',
                                name        : 'campo[<%= campo.id %>]',
                                id: '<%= campo.nome%>',
                                width       : 250,
                                format      : 'd-m-Y',
                                allowBlank  : <%= !campo.required %>,
                                blankText   : "Este campo é obrigatório",
                                hidden      : <%= !campo.mostra_update %>,
                                hideLabel   : <%= !campo.mostra_update %>,
                              })
                          <% end %>
                          <% if(campo.tipo.upcase == "TEXT") %>
                              new Ext.form.TextArea({
                              fieldLabel: '<%= campo.label %>',
                                name: 'campo[<%= campo.id %>]',
                                id: '<%= campo.nome%>',
                                width:250,
                                allowBlank: <%= !campo.required %>,
                                blankText: "Este campo é obrigatório",
                                hidden: <%= !campo.mostra_update %>,
                                hideLabel: <%= !campo.mostra_update %>,
                              })
                          <% end %>
                          <% if(campo.tipo.upcase == "STRING"  || campo.tipo.upcase == "INT" || campo.tipo.upcase == "DECIMAL") %>
                            {
                                fieldLabel: '<%= campo.label %>',
                                name: 'campo[<%= campo.id %>]',
                                id: '<%= campo.nome%>',
                                width:250,
                                allowBlank: <%= !campo.required %>,
                                blankText: "Este campo é obrigatório",
                                hidden: <%= !campo.mostra_update %>,
                                hideLabel: <%= !campo.mostra_update %>,
                            }
                          <% end %>
                          <% if numero != 0 %>
                            ,
                          <% end %>
                      <% end %>
                      ]})
                      <% if numero_grupo != 0 %>
                        ,
                      <% end %>
                <% end %>
              ]})
          ]});
    
    // FORM DE DETALHE
    var fs = new Ext.FormPanel({
      frame: true,
      region: 'center',
      margins: '10 10 10 10',
      width:"100%",
      labelAlign: 'right',
      labelWidth: 160,
      autoHeight: true,
      items: [
      new Ext.TabPanel({
        frame: true,
        width:"100%",
        margins: '10 10 10 10',
        activeTab: 0,
        waitMsgTarget: true,
        border:false,
        anchor:'100% 100%',
        deferredRender:false,
        autoHeight: true,
        resizeTabs: true,
        tabWidth:200,
        minTabWidth: 100,
        enableTabScroll: true,
        defaults: {autoScroll:true},
        items: [
          <% numero_grupo = @event.grupo_camposs.length %>
          <% grupos_campos = EventosGruposCampos.find_all_by_evento_id(@event.id, :order=>"`eventos_grupos_campos`.order") %>
          <% grupos_campos.each do |evento_grupo| %>
            <% grupo = evento_grupo.grupo_campos %>
            <% numero_grupo = numero_grupo-1 %>
                new Ext.form.FieldSet({
                    frame: true,
                    region: 'center',
                    title:'<%= grupo.label %>',
                    margins: '10 10 10 10',
                    width:"100%",
                    labelAlign: 'right',
                    labelWidth: 160,
                    defaultType: 'textfield',
                    autoHeight: true,
                    headerAsText: false,
                    items: [
                      <% numero = grupo.campos.length %>
                      <% campos = Campo.find_all_by_grupo_campos_id(grupo.id, :order=>"`campos`.order") %>
                      <% campos.each do |campo| %>
                        <% numero = numero-1 %>
                          <% if(campo.tipo.upcase == "DATE") %>
                              new Ext.form.DateField({
                                fieldLabel  : '<%= campo.label %>',
                                name        : '<%= campo.nome%>',
                                id          : 'campo[<%= campo.id %>]',
                                width       : "70%",
                                format      : 'd-m-Y',
                                allowBlank  : <%= !campo.required %>,
                                blankText   : "Este campo é obrigatório",
                                hidden      : <%= !campo.mostra_detalhe %>,
                                hideLabel   : <%= !campo.mostra_detalhe %>,
                                disabled    : true,
                                disabledClass: ""
                              })
                          <% end %>
                          <% if(campo.tipo.upcase == "TEXT") %>
                              new Ext.form.TextArea({
                              fieldLabel: '<%= campo.label %>',
                                name: '<%= campo.nome%>',
                                id: 'campo[<%= campo.id %>]',
                                width:"70%",
                                allowBlank: <%= !campo.required %>,
                                blankText: "Este campo é obrigatório",
                                hidden: <%= !campo.mostra_detalhe %>,
                                hideLabel: <%= !campo.mostra_detalhe %>,
                                disabled: true,
                                disabledClass: ""
                                
                              })
                          <% end %>
                          <% if(campo.tipo.upcase == "STRING"  || campo.tipo.upcase == "INT" || campo.tipo.upcase == "DECIMAL"  || campo.tipo.upcase == "LOV" ) %>
                            {
                                fieldLabel: '<%= campo.label %>',
                                name: '<%= campo.nome%>',
                                id: 'campo[<%= campo.id %>]',
                                width:"70%",
                                allowBlank: <%= !campo.required %>,
                                blankText: "Este campo é obrigatório",
                                hidden: <%= !campo.mostra_detalhe %>,
                                hideLabel: <%= !campo.mostra_detalhe %>,
                                disabled: true,
                                disabledClass: ""
                                
                            }
                          <% end %>
                          <% if numero != 0 %>
                            ,
                          <% end %>
                      <% end %>
                      ]})
                    /*]
                  })*/
                  <% if numero_grupo != 0 %>
                    ,
                  <% end %>
            <% end %>
          ]})
    ]});
    
    
    
    myStore.load({params:{start:currentPage*pageSize, limit:pageSize}});
    
    <% if(@current_user != nil && ((@current_user.profile == "ADMIN") || ((@current_user.profile == "EVENTO_FACTURACAO_LEITURA" || @current_user.profile == "EVENTO_FACTURACAO_ESCRITA") && @current_user.evento_id == @event.id))) %>
      facturasStore.load();
      //reservasStore.load();
    <% end %>
    
    outerPanel.render('canvas');
});
  
  
  // A reusable error reader class for XML forms
Ext.form.XmlErrorReader = function(){
    Ext.form.XmlErrorReader.superclass.constructor.call(this, {
            record : 'field',
            success: '@success'
        }, [
            'id', 'msg'
        ]
    );
};
Ext.extend(Ext.form.XmlErrorReader, Ext.data.XmlReader);
</script>
<div id="canvas"></div>